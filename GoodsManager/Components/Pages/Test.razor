@page "/test"
@using ReferenceClass.Models
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (Users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Address</th>
            <th>Phone</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var value in Users)
        {
            <tr>
                <td>@value.Id</td>
                <td>@value.Name</td>
                <td>@value.Address</td>
                <td>@value.Phone</td>
            </tr>
        }
        </tbody>
    </table>

    <div class="mt-3">
        <input type="button" class="btn btn-secondary me-2" @onclick="PrevPage" value="Previous"
               disabled="@(!CanGoBack)"/>

        @for (int i = Math.Max(1, CurPage - 2); i <= Math.Min(TotalPages, CurPage + 2); i++)
        {
            int j = i;
            if (i == CurPage)
            {
                <span class="px-2 fw-bold" style="cursor:pointer" @onclick="() => ShowPage()">@i</span>
            }
        }

        <input type="button" class="btn btn-secondary ms-2" @onclick="NextPage" value="Next" disabled="@(!CanGoNext)"/>

        <button class="btn btn-primary" @onclick="Increment">Click me</button>
    </div>

    <p>test: @CurPage</p>
}

@code {
    private static int CurPage = 1;

    private void Increment()
    {
        CurPage++;
    }

    public IEnumerable<User> Users { get; set; } = [];
    public UserDto? UserDto = new();

    private int TotalPages = 1;

    private bool CanGoBack => CurPage > 1;
    private bool CanGoNext => CurPage < TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await ShowPage();
    }

    protected async Task PrevPage()
    {
        if (CurPage > 1)
        {
            CurPage--;
            await ShowPage();
        }
    }

    protected async Task NextPage()
    {
        if (CurPage < TotalPages)
        {
            CurPage++;
            await ShowPage();
        }
    }

    public async Task ShowPage()
    {
        CurPage++;
        UserDto = await Http.GetFromJsonAsync<UserDto>
            ($"http://localhost:5191/User/UserPagination?Page={CurPage}&PageSize=5");
        Users = UserDto.Users;

        if (UserDto != null)
        {
            Users = UserDto.Users.ToList();
            TotalPages = UserDto.TotalCount;
        }
    }

}