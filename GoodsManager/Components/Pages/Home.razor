@page "/"
@using System.Net
@using ReferenceClass.Models
@inject HttpClient HttpClient

<PageTitle>Home</PageTitle>

@if (Users is null)
{
    <p><em>Loading....</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Phone</th>
            <th>Address</th>
            <th>Orders</th>
        </tr>
        </thead>

        <tbody>
        @foreach (var user in Users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.Name</td>
                <td>@user.Phone</td>
                <td>@user.Address</td>
                <td>@user.Orders</td>
            </tr>
        }
        </tbody>
    </table>

    <div class="pagination">
        <button class="btn " @onclick="@(async () => await NavigateToPage("prev"))">Prev</button>

        @for (int i = startPage; i <= endPage; i++)
        {
            var currentPage = i;
            <button class="btn pagebutton @(currentPage == curPage ? "btn-danger" : "")"
                    @onclick="@(async () => await RefreshRecord(currentPage))">
                @currentPage
            </button>
        }

        <button class="btn " @onclick="@(async () => await NavigateToPage("next"))">Next</button>
    </div>
}

@code
{
    public IEnumerable<User> Users { get; set; } = [];
    public UserDto? UserDto = new();

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;


    protected override async Task OnInitializedAsync()
    {
        pagerSize = 3;
        pageSize = 10;
        curPage = 1;

        UserDto = await HttpClient.GetFromJsonAsync<UserDto>
            ("http://localhost:5191/User/UserPagination?Page=" + curPage + "&PageSize=" + pageSize);
        Users = UserDto.Users;
        totalRecords = UserDto.TotalCount;

        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pagerSize);

        SetPagerSize("forward");
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }

                curPage += 1;
            }
        }
        else if (direction == "back")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }

                curPage -= 1;
            }
        }
    }

    public async Task RefreshRecord(int currentPage)
    {
        curPage = currentPage;
        UserDto = await HttpClient.GetFromJsonAsync<UserDto>
            ("http://localhost:5191/User/UserPagination?Page=" + curPage + "&PageSize=" + pageSize);
        Users = UserDto.Users;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;

            if (endPage + startPage < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }

            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage -= pageSize;
        }
    }
}
