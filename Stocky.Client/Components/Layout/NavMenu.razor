@using MudBlazor.Components.DialogWindows
@using MudBlazor.Components.Service
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IDialogService DialogService

<MudNavMenu>

    <MudItem Class="d-flex align-center px-4 pt-2 mb-4">
        <MudAvatar Size="Size.Medium" Color="Color.Primary" Class="mr-2">
            @GetInitial(AuthService.Username)
        </MudAvatar>
        <MudText Typo="Typo.subtitle2" Class="text-primary" Style="font-weight: 600;font-size: 1.1rem;">
            @AuthService.Username
        </MudText>
    </MudItem>

    @if (AuthService.IsAdmin)
    {
        <MudNavLink Href="home" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.ShoppingCart">
            Заказы клиентов
        </MudNavLink>

        <MudNavLink Href="pockets" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Schedule">
            Незавершённые заказы
        </MudNavLink>

        <MudNavLink Href="adding-product" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.PlaylistAdd">
            Добавление продукта
        </MudNavLink>

        <MudNavLink Href="products" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Inventory">
            Все продукты
        </MudNavLink>

        <MudNavLink Href="report" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Inventory">
            Все продукты
        </MudNavLink>
    }
    else if (AuthService.IsAdder)
    {
        <MudNavLink Href="adding-product" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.PlaylistAdd">
            Добавление продукта
        </MudNavLink>

        <MudNavLink Href="pockets" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Inventory">
            Пакеты
        </MudNavLink>
    }

    <MudNavLink OnClick="Logout" Icon="@Icons.Material.Filled.ExitToApp" Color="Color.Error">
        Выйти
    </MudNavLink>
</MudNavMenu>

@code {

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnChange += StateHasChanged;
        await AuthService.LoadTokenAsync();
    }

    public void Dispose()
    {
        AuthService.OnChange -= StateHasChanged;
    }

    private async Task Logout()
    {
        await DialogService.ShowAsync<LogOutConfirmDialog>("Создать заказ");
    }

    private string GetInitial(string? username)
    {
        if (string.IsNullOrWhiteSpace(username))
            return "?";

        return username.Substring(0, 1).ToUpper();
    }

}
