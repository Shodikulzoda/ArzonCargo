@using MudBlazor.Components.DialogWindows
@inherits LayoutComponentBase
@inject IDialogService DialogService

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Stocky</MudText>
        <MudSpacer />
        
        <!-- Dark Mode Toggle -->
        <MudIconButton Icon="@DarkLightModeButtonIcon"
                       Color="Color.Inherit"
                       OnClick="@DarkModeToggle" />

        <!-- Price Change Button -->
        <MudIconButton Icon="@Icons.Material.Filled.AttachMoney"
                       Color="Color.Inherit"
                       OnClick="@ShowPriceDialog"
                       Title="Change Price" />
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>

    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        _theme = new MudTheme()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle() => _drawerOpen = !_drawerOpen;
    private void DarkModeToggle() => _isDarkMode = !_isDarkMode;

    private async Task ShowPriceDialog()
    {
        var dialog = await DialogService.ShowAsync<PriceDialog>("Change Price");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is decimal newPrice)
        {
            Console.WriteLine($"New price submitted: {newPrice}");
        }
    }

    private string DarkLightModeButtonIcon => _isDarkMode
        ? Icons.Material.Rounded.AutoMode
        : Icons.Material.Outlined.DarkMode;

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };
}
