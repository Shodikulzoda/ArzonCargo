@using System.Net.Http.Headers
@using System.Text.Json
@using MudBlazor.Components.DialogWindows.OrderItemDialogs
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@inject HttpClient Http
@inject IDialogService DialogService
@inject AuthService AuthService

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudTable Items="_orders.Items" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Order, object>(x => x.Id)">Id</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Order, object?>(x => x.BarCode)">BarCode</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Order, object?>(x => x.TotalWeight)">TotalWeight</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Order, object?>(x => x.TotalAmount)">TotalAmount</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="BarCode">@context.BarCode</MudTd>
            <MudTd DataLabel="TotalWeight">@context.TotalWeight</MudTd>
            <MudTd DataLabel="TotalAmount">@context.TotalAmount</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.ViewList"
                               Color="Color.Success"
                               OnClick="@(() => UserOrderItems(context.Id))"/>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <div class="mt-4 d-flex justify-between">
        <MudButton OnClick="Decrement" Disabled="@(_currentPage <= 1)" Color="Color.Secondary">Back</MudButton>
        <MudText Class="mx-2">@_currentPage / @_totalPages</MudText>
        <MudButton OnClick="Increment" Disabled="@(_currentPage >= _totalPages)" Color="Color.Primary">Next</MudButton>
    </div>
}

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public int UserId { get; set; }

    private PageData<Order>? _orders = new();

    private int _currentPage = 1;
    private int _totalPages = 1;
    private const int PageSize = 15;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        _isLoading = true;

        try
        {
            var url = $"http://localhost:5191/Order/GetOrdersByUserId?UserId={UserId}&Page={_currentPage}&PageSize={PageSize}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();

                _orders = JsonSerializer.Deserialize<PageData<Order>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                _orders.TotalPages = (int)Math.Ceiling((double)_orders.TotalCount / PageSize);
            }
            else
            {
                _orders.Items = [];
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to load orders: " + ex.Message);
        }

        _isLoading = false;
    }

    private async Task UserOrderItems(int orderId)
    {
        var parameters = new DialogParameters
        {
            { "OrderId", orderId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialogReference = await DialogService.ShowAsync<OrderItems>("OrderItem Of Order", parameters, options);
        var dialogReferenceResult = await dialogReference.Result;

        if (dialogReferenceResult is not null)
        {
            if (!dialogReferenceResult.Canceled)
            {
                await LoadOrders();
            }
        }
    }

    private async Task Increment()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadOrders();
        }
    }

    private async Task Decrement()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadOrders();
        }
    }

    private void Close() => MudDialog.Cancel();
}
