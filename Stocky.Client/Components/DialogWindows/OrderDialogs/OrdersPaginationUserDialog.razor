@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using MudBlazor.Components.DialogWindows.OrderItemDialogs
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@inject HttpClient Http
@inject IDialogService DialogService
@inject AuthService AuthService
@inject IConfiguration Configuration

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}

<MudTable Items="_orders?.Items" Hover="true" SortLabel="Сортировать по" Elevation="1" Dense="true">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Order, object>(x => x.Id)">Идентификатор</MudTableSortLabel>
        </MudTh>
        <MudTh>Пользователь</MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Order, object?>(x => x.BarCode)">Штрихкод</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Order, object?>(x => x.TotalWeight)">Общий вес</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Order, object?>(x => x.TotalAmount)">Общая сумма</MudTableSortLabel>
        </MudTh>
        <MudTh>Действия</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Идентификатор">@context.Id</MudTd>
        <MudTd DataLabel="Пользователь">@_employeeName</MudTd>
        <MudTd DataLabel="Штрихкод">@context.BarCode</MudTd>
        <MudTd DataLabel="Общий вес">@context.TotalWeight</MudTd>
        <MudTd DataLabel="Общая сумма">@context.TotalAmount</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.ViewList"
                           Color="Color.Success"
                           OnClick="@(() => UserOrderItems(context.Id))"/>
        </MudTd>
    </RowTemplate>
</MudTable>

<div class="mt-4 d-flex justify-between">
    <MudButton OnClick="Decrement" Disabled="@(_currentPage <= 1)" Color="Color.Secondary">Назад</MudButton>
    <MudText Class="mx-2">@_currentPage / @_totalPages</MudText>
    <MudButton OnClick="Increment" Disabled="@(_currentPage >= _totalPages)" Color="Color.Primary">Далее</MudButton>
</div>
}

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public int UserId { get; set; }
    private string? ApiBaseUrl => Configuration["ApiBaseUrl"];

    private PageData<Order>? _orders = new();

    private int _currentPage = 1;
    private int _totalPages = 1;
    private string? _employeeName = "";
    private const int PageSize = 15;
    private bool _isLoading;

    private async Task LoadCurrentPrice()
    {
        try
        {
            var token = AuthService.Token;

            var request = new HttpRequestMessage(HttpMethod.Get, $"{ApiBaseUrl}/api/PriceList/GetPrice");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                await response.Content.ReadFromJsonAsync<PriceResponse>();
            }
            else
            {
                new PriceResponse();
            }
        }
        catch (Exception ex)
        {
            new PriceResponse
            {
                CreatedAt = default,
                PricePerKg = 0.0
            };
        }
        finally
        {
            StateHasChanged();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        _employeeName = AuthService.Username;
        await LoadCurrentPrice();
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        _isLoading = true;

        try
        {
            var url = $"{ApiBaseUrl}/Order/GetOrdersByUserId?UserId={UserId}&Page={_currentPage}&PageSize={PageSize}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();

                _orders = JsonSerializer.Deserialize<PageData<Order>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                _totalPages = (int)Math.Ceiling((double)(_orders?.TotalCount ?? 0) / PageSize);

                if (_orders?.Items != null)
                {
                    var uniqueEmployeeIds = _orders.Items
                        .Select(o => o.EmployeeId)
                        .Distinct()
                        .Where(id => id != 0)
                        .ToList();

                    var usernameTasks = uniqueEmployeeIds.Select(async empId => { await GetUsernameFromApi(empId); });

                    await Task.WhenAll(usernameTasks);
                }
            }
            else
            {
                _orders = new PageData<Order> { Items = [], TotalCount = 0 };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to load orders: " + ex.Message);
            _orders = new PageData<Order> { Items = [], TotalCount = 0 };
        }

        _isLoading = false;
    }

    private async Task<string> GetUsernameFromApi(int employeeId)
    {
        try
        {
            var url = $"{ApiBaseUrl}/api/Auth/GetUserById";
            var jsonContent = JsonSerializer.Serialize(new { id = employeeId });
            var httpContent = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var request = new HttpRequestMessage(HttpMethod.Post, url) { Content = httpContent };
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("*/*"));

            using var httpClient = new HttpClient();
            var response = await httpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();

                var userResponse = JsonSerializer.Deserialize<UserResponse>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                return userResponse?.UserName ?? $"Пользователь {employeeId}";
            }

            return $"Пользователь {employeeId}";
        }
        catch
        {
            return $"Ошибка {employeeId}";
        }
    }

    private async Task UserOrderItems(int orderId)
    {
        var parameters = new DialogParameters
        {
            { "OrderId", orderId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialogReference = await DialogService.ShowAsync<OrderItems>("Элементы заказа", parameters, options);
        var dialogReferenceResult = await dialogReference.Result;

        if (dialogReferenceResult is not null && !dialogReferenceResult.Canceled)
        {
            await LoadOrders();
        }
    }

    private async Task Increment()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadOrders();
        }
    }

    private async Task Decrement()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadOrders();
        }
    }

    private void Close() => MudDialog.Cancel();

    public class UserResponse(string userName)
    {
        public string UserName { get; init; } = userName;
    }

    private class PriceResponse
    {
        public double PricePerKg { get; init; }
        public int Id { get; init; }
        public DateTime CreatedAt { get; init; }
        public bool IsDeleted { get; init; }
    }

}

