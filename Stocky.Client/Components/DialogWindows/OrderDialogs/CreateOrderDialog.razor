@using System.Net.Http.Headers
@inject HttpClient Http
@inject AuthService AuthService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@using Stocky.Shared.Models.Enums

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">@ContentText</MudText>

        <MudSelect T="PaymentMethod" Label="Тип оплаты" @bind-Value="_selectedPaymentMethod" Required="true" Class="mb-3">
            <MudSelectItem Value="PaymentMethod.Cash">Наличные</MudSelectItem>
            <MudSelectItem Value="PaymentMethod.DushanbeCity">Душанбе Сити</MudSelectItem>
            <MudSelectItem Value="PaymentMethod.Alif">Alif</MudSelectItem>
            <MudSelectItem Value="PaymentMethod.Eskhata">Eskhata</MudSelectItem>
        </MudSelect>

        <MudTextField T="double" Label="Сумма" Variant="Variant.Outlined" @bind-Value="_amount" Required="true" Class="mb-3" />
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="@Color" OnClick="CreateOrder" Variant="Variant.Filled" Disabled="_isLoading">
            @if (_isLoading)
            {
                <MudProgressCircular Size="(Size)16" Indeterminate="true" Color="Color.Inherit" Class="mr-2" />
            }
            @ButtonText
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public int PocketId { get; set; }
    [Parameter] public int UserId { get; set; }
    [Parameter] public double TotalAmount { get; set; }
    [Parameter] public string? ContentText { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Создать";
    [Parameter] public Color Color { get; set; } = Color.Default;

    private string? ApiBaseUrl => Configuration["ApiBaseUrl"];
    private bool _isLoading;

    private double _amount;
    private PaymentMethod _selectedPaymentMethod = PaymentMethod.Cash;

    protected override void OnInitialized()
    {
        _amount = TotalAmount;
        ContentText ??= $"Создать заказ на сумму {_amount}?";
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task CreateOrder()
    {
        _isLoading = true;
        try
        {
            var url = $"{ApiBaseUrl}/Order/CreateOrder";
            var createPayload = new Order
            {
                UserId = UserId,
                EmployeeId = AuthService.EmployeeId,
                TotalAmount = _amount,
                Method = _selectedPaymentMethod
            };

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);
            var response = await Http.PostAsJsonAsync(url, createPayload);

            if (response.IsSuccessStatusCode)
            {
                MudDialog.Close(DialogResult.Ok(true));
                NavigationManager.NavigateTo("/pockets", true);
            }
            else
            {
                Console.WriteLine($"Ошибка при создании заказа: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Исключение при создании заказа: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }
}
