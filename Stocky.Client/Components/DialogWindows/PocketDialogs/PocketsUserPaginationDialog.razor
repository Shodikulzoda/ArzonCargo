@using System.Net.Http.Headers
@using System.Text.Json
@using MudBlazor.Components.DialogWindows.PocketItemDialogs
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@inject HttpClient Http
@inject IDialogService DialogService
@inject AuthService AuthService
@inject IConfiguration Configuration

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudTable Items="_pockets.Items" Hover="true" SortLabel="Сортировать по" Elevation="1" Dense="true">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Pocket, object>(x => x.Id)">ID</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Pocket, object?>(x => x.BarCode)">Штрихкод</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Pocket, object?>(x => x.TotalWeight)">Общий вес</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Pocket, object?>(x => x.TotalAmount)">Общая сумма
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudText>Товары</MudText>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Штрихкод">@context.BarCode</MudTd>
            <MudTd DataLabel="Общий вес">@context.TotalWeight</MudTd>
            <MudTd DataLabel="Общая сумма">@context.TotalAmount</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.ShoppingBag"
                               Color="Color.Success"
                               OnClick="@(() => UserPocketItems(context.Id))"/>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <div class="mt-4 d-flex justify-between">
        <MudButton OnClick="Decrement" Disabled="@(_currentPage <= 1)" Color="Color.Secondary">Назад</MudButton>
        <MudText Class="mx-2">@_currentPage / @_totalPages</MudText>
        <MudButton OnClick="Increment" Disabled="@(_currentPage >= _totalPages)" Color="Color.Primary">Далее</MudButton>
    </div>
}

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public int UserId { get; set; }

    private PageData<Pocket>? _pockets = new();
    private int _currentPage = 1;
    private int _totalPages = 1;
    private const int PageSize = 15;
    private bool _isLoading;
    private string ApiBaseUrl => Configuration["ApiBaseUrl"];

    protected override async Task OnInitializedAsync()
    {
        await LoadPockets();
    }

    private async Task LoadPockets()
    {
        _isLoading = true;

        try
        {
            var url = $"{ApiBaseUrl}/Pocket/GetPocketsByUserId?UserId={UserId}&Page={_currentPage}&PageSize={PageSize}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                _pockets = JsonSerializer.Deserialize<PageData<Pocket>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                _pockets.TotalPages = (int)Math.Ceiling((double)_pockets.TotalCount / PageSize);
            }
            else
            {
                _pockets.Items = [];
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Не удалось загрузить пакеты: " + ex.Message);
        }

        _isLoading = false;
    }

    private async Task UserPocketItems(int pocketId)
    {
        var parameters = new DialogParameters
        {
            { "PocketId", pocketId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialogReference = await DialogService.ShowAsync<PocketItems>("Товары в пакете", parameters, options);
        var dialogReferenceResult = await dialogReference.Result;

        if (dialogReferenceResult is not null && !dialogReferenceResult.Canceled)
        {
            await LoadPockets();
        }
    }

    private async Task Increment()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadPockets();
        }
    }

    private async Task Decrement()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadPockets();
        }
    }

    private void Close() => MudDialog.Cancel();
}