@using System.Net
@using System.Net.Http.Headers
@using Append.Blazor.Printing
@using MudBlazor.Components.Service
@using QRCoder
@using Stocky.Shared.Models
@inject HttpClient Http
@inject AuthService AuthService
@inject IJSRuntime Js
@inject IPrintingService PrintingService
@inject IConfiguration Configuration
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudPaper Class="pa-6 mx-auto" Style="max-width:600px;">
            <MudStack Spacing="3">
                <MudText Typo="Typo.h5">Создать новый пакет</MudText>

                <MudAutocomplete T="User"
                                 Label="Поиск клиента"
                                 Variant="Variant.Outlined"
                                 SearchFunc="SearchUsers"
                                 ToStringFunc='u => u != null ? $"{u.Name} - {u.Phone}" : string.Empty'
                                 @bind-Value="_selectedUser"
                                 DebounceInterval="300"
                                 MinCharacters="2"
                                 Clearable="true"/>

                <MudTextField @bind-Value="_pocketModel.TotalWeight"
                              Label="Общий вес"
                              Variant="Variant.Outlined"/>

                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CreatePocket">
                    Создать пакет
                </MudButton>

                <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="FinishPocket">
                    Завершить продажу
                </MudButton>

                @if (_pocketCreated)
                {
                    <MudDivider Class="my-4"/>

                    <MudText Typo="Typo.h6" Class="mt-2">Штрихкод пакета: @_pocketModel.BarCode</MudText>

                    <MudStack Spacing="2">
                        <MudTextField @bind-Value="_productBarCode"
                                      Label="Сканировать штрихкод товара"
                                      Immediate="true"
                                      OnKeyDown="HandleKeyDown"
                                      Class="barcode-text"
                                      Variant="Variant.Outlined"/>

                        <MudButton OnClick="AddProductToPocket" Color="Color.Warning" Variant="Variant.Filled">
                            Добавить товар
                        </MudButton>
                    </MudStack>

                    <MudTable Items="_pocketItems" Class="mt-4" Dense="true" Hover="true" Elevation="0">
                        <HeaderContent>
                            <MudTh>Штрихкод</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.ProductBarCode</MudTd>
                        </RowTemplate>
                    </MudTable>
                }

                <MudText Color="Color.Success" Class="mt-3">@_message</MudText>
                <MudText Color="Color.Error" Class="mt-3">@_errorMessage</MudText>
            </MudStack>
        </MudPaper>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Закрыть</MudButton>
    </DialogActions>
</MudDialog>

<script>
    window.focusElement = () => {
        const el = document.querySelector('.barcode-text input');
        if (el) {
            el.value = '';
            el.focus();
        }
    };
</script>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    private Pocket _pocketModel = new();
    private bool _pocketCreated;
    private string? _message = "";
    private string? _errorMessage = "";
    private string? _productBarCode;
    private List<PocketItem> _pocketItems = [];
    private string? ApiBaseUrl => Configuration["ApiBaseUrl"];

    private User? _selectedUser;

    private void Cancel() => MudDialog.Cancel();

    private async Task<IEnumerable<User>> SearchUsers(string text)
    {
        if (string.IsNullOrWhiteSpace(text) || text.Length < 1)
            return [];

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"{ApiBaseUrl}/User/Search?Text={text}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);
            if (!response.IsSuccessStatusCode)
                return [];

            return await response.Content.ReadFromJsonAsync<List<User>>() ?? [];
        }
        catch
        {
            return [];
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_selectedUser != null)
        {
            _pocketModel.UserId = _selectedUser.Id;
        }
    }

    private byte[] GenerateQrCode(int size)
    {
        using var qrGenerator = new QRCodeGenerator();
        using var qrCodeData = qrGenerator.CreateQrCode(_pocketModel.Id.ToString(), QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new PngByteQRCode(qrCodeData);
        return qrCode.GetGraphic(size);
    }

    private async Task CreatePocket()
    {
        var request = new HttpRequestMessage(HttpMethod.Post, $"{ApiBaseUrl}/Pocket/CreatePocket")
        {
            Content = JsonContent.Create(_pocketModel)
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            _pocketModel = await response.Content.ReadFromJsonAsync<Pocket>() ?? new Pocket();
            _pocketCreated = true;
        }
    }

    private async Task AddProductToPocket()
    {
        if (string.IsNullOrWhiteSpace(_productBarCode) || _pocketModel?.Id == 0)
        {
            return;
        }

        if (_pocketItems.Any(item => item.ProductBarCode == _productBarCode))
        {
            _message = $"Товар с штрихкодом {_productBarCode} уже добавлен.";
            _errorMessage = string.Empty;
            await Js.InvokeVoidAsync("focusElement");

            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Get, $"{ApiBaseUrl}/Product/GetByBarCode?BarCode={_productBarCode}")
        {
            Content = JsonContent.Create(_pocketModel)
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

        var response = await Http.SendAsync(request);

        if (response == null || response.StatusCode == HttpStatusCode.NotFound)
        {
            var parameters = new DialogParameters
            {
                ["ContentText"] = $"Товар с кодом {_productBarCode} не найден. Хотите добавить его?"
            };
            var options = new DialogOptions { CloseOnEscapeKey = true };

            var dialog = await DialogService.ShowAsync<ConfirmDialog>("Подтверждение", parameters, options);
            var dialogResult = await dialog.Result;

            if (!dialogResult.Canceled)
            {
                await ActuallyAddProduct();
            }
            else
            {
                _message = string.Empty;
                _errorMessage = $"Товар не добавлен.";
                await Js.InvokeVoidAsync("focusElement"); // Focus because we're staying on the barcode input
            }
        }
        else if (response.IsSuccessStatusCode)
        {
            await ActuallyAddProduct();
        }
        else if (response.StatusCode == HttpStatusCode.InternalServerError)
        {
            _message = string.Empty;
            _errorMessage = "Товар не найден в базе данных.";
        }
    }

    private async Task ActuallyAddProduct()
    {
        var pocketItem = new PocketItem
        {
            PocketId = _pocketModel.Id,
            ProductBarCode = _productBarCode
        };

        var request = new HttpRequestMessage(HttpMethod.Post, $"{ApiBaseUrl}/PocketItem/Add")
        {
            Content = JsonContent.Create(pocketItem)
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            _pocketItems.Add(pocketItem);
            _productBarCode = "";
            _message = "Товар добавлен.";
            _errorMessage = "";
            await Js.InvokeVoidAsync("focusElement"); // Focus here to quickly scan next barcode
        }
    }

    private async Task FinishPocket()
    {
        if (_pocketItems.Count <= 0)
        {
            _errorMessage = "no pocket was added";
            _message = string.Empty;
            return;
        }

        if (_pocketModel?.BarCode is null)
        {
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Put, $"{ApiBaseUrl}/Pocket/UpdatePocket")
        {
            Content = JsonContent.Create(_pocketModel)
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            _message = "Создано успешно";
            _errorMessage = string.Empty;
            _pocketItems.Clear();

            var qrBytes = GenerateQrCode(10);
            var base64Qr = Convert.ToBase64String(qrBytes);

            var rawHtml = string.Join(
                Environment.NewLine,
                "<div style='width:57mm;height:57mm;padding:0;margin-left:1mm; margin-right:1mm; text-align:center;font-family:sans-serif;'>",
                "<h2 style='margin:0;'>ArzonCargo</h2>",
                "<div style='font-size:3mm;margin:0'><b>+992 92 788 0989</b></div>",
                $"<img src='data:image/png;base64,{base64Qr}' style='width:40mm;height:40mm;margin:1mm 0;' />",
                $"<div style='font-size:3mm;'><b>Номер клиента: {_selectedUser?.Phone}</b></div>",
                "</div>"
            );

            await PrintingService.Print(rawHtml, PrintType.RawHtml);
            MudDialog.Cancel();
        }
    }

    private async Task<IEnumerable<User>> SearchUsers(string text, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(text) || text.Length < 1)
            return [];

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"{ApiBaseUrl}/User/Search?Text={text}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);
            var response = await Http.SendAsync(request, cancellationToken);

            if (!response.IsSuccessStatusCode)
                return [];

            return await response.Content.ReadFromJsonAsync<List<User>>(cancellationToken: cancellationToken) ?? [];
        }
        catch
        {
            return [];
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key is "Enter" or "NumpadEnter")
        {
            await AddProductToPocket();
        }
    }

}