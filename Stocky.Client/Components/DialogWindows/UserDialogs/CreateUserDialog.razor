@using System.Net.Http.Headers
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@inject HttpClient Http
@inject AuthService AuthService
@inject IConfiguration Configuration

<MudDialog>
    <DialogContent>

        <MudTextField @ref="nameField"
                      Label="Имя"
                      @bind-Value="UserModel.Name"
                      Variant="Variant.Outlined"
                      Margin="Margin.Dense"
                      @onkeydown="e => OnKeyDown(e, 0)"/>

        <MudTextField @ref="phoneField"
                      Label="Телефон"
                      @bind-Value="UserModel.Phone"
                      Variant="Variant.Outlined"
                      Margin="Margin.Dense"
                      @onkeydown="e => OnKeyDown(e, 1)"/>

        <MudTextField @ref="addressField"
                      Label="Адрес"
                      @bind-Value="UserModel.Address"
                      Variant="Variant.Outlined"
                      Margin="Margin.Dense"
                      @onkeydown="e => OnKeyDown(e, 2)"/>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Variant="Variant.Filled">Создать</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public User UserModel { get; set; } = new();

    private string? ApiBaseUrl => Configuration["ApiBaseUrl"];

    private MudTextField<string> nameField;
    private MudTextField<string> phoneField;
    private MudTextField<string> addressField;

    private bool _firstRender = true;

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_firstRender)
        {
            _firstRender = false;
            await nameField.FocusAsync();
        }
    }

    private async Task Submit()
    {
        try
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.PostAsJsonAsync($"{ApiBaseUrl}/User/CreateUser", UserModel);

            if (response.IsSuccessStatusCode)
            {
                MudDialog.Close(DialogResult.Ok(true));
                return;
            }

            Console.WriteLine("Create failed: " + response.StatusCode + " - " + response.ReasonPhrase);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception during user creation: " + ex.Message);
        }

        Cancel();
    }

    private async Task OnKeyDown(KeyboardEventArgs e, int fieldIndex)
    {
        if (e.Key is "Enter" or "NumpadEnter")
        {
            switch (fieldIndex)
            {
                case 0:
                    if (!string.IsNullOrWhiteSpace(UserModel.Name))
                        await phoneField.FocusAsync();
                    break;
                case 1:
                    if (!string.IsNullOrWhiteSpace(UserModel.Phone))
                        await addressField.FocusAsync();
                    break;
                case 2:
                    if (!string.IsNullOrWhiteSpace(UserModel.Name) &&
                        !string.IsNullOrWhiteSpace(UserModel.Phone) &&
                        !string.IsNullOrWhiteSpace(UserModel.Address))
                    {
                        await Submit();
                    }

                    break;
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}