@inject HttpClient Http
@inject IConfiguration Configuration

<MudDialog>
    <DialogContent>
        @if (_isLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else
        {
            <MudText Typo="Typo.h6">@ContentText</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="Cancel" Disabled="_isLoading">Отмена</MudButton>
        <MudButton Color="@Color"
                   OnClick="Delete"
                   Variant="Variant.Filled"
                   Disabled="_isLoading">
            @ButtonText
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public int ProductId { get; set; }
    [Parameter] public string ContentText { get; set; } = "Вы уверены, что хотите удалить этот продукт?";
    [Parameter] public string ButtonText { get; set; } = "Удалить";
    [Parameter] public Color Color { get; set; } = Color.Error;

    private bool _isLoading = false;
    private string ApiBaseUrl => Configuration["ApiBaseUrl"];

    private void Cancel() => MudDialog.Cancel();

    private async Task Delete()
    {
        _isLoading = true;

        try
        {
            var url = $"{ApiBaseUrl}Product/DeleteUser?Id={ProductId}";
            var response = await Http.DeleteAsync(url);

            if (response.IsSuccessStatusCode)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Console.WriteLine("Ошибка при удалении продукта: " + response.ReasonPhrase);
                MudDialog.Close(DialogResult.Ok(false));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при удалении продукта: " + ex.Message);
            MudDialog.Close(DialogResult.Ok(false));
        }
        finally
        {
            _isLoading = false;
        }
    }
}