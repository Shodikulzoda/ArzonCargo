@using System.Net.Http.Headers
@using System.Text.Json
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@inject HttpClient Http
@inject AuthService AuthService
@inject IConfiguration Configuration
@inject IDialogService DialogService

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudTable Items="_pocketItems.Items" Hover="true" SortLabel="Сортировать по" Elevation="1" Dense="true">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<PocketItem, object>(x => x.Id)">ID</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<PocketItem, object?>(x => x.ProductBarCode)">Штрихкод
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<PocketItem, object?>(x => x.CreatedAt.ToLocalTime())">Дата создания
                </MudTableSortLabel>
            </MudTh>
            <MudTh>Удалить</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Статус">@context.ProductBarCode</MudTd>
            <MudTd DataLabel="Дата создания">@context.CreatedAt.ToLocalTime().ToString("g")</MudTd>
            <MudTd>
                <MudButton Color="Color.Error"
                           Variant="Variant.Outlined"
                           Size="Size.Small"
                           OnClick="@(() => ConfirmDelete(context.ProductBarCode, context.Id))">
                    <MudIcon Icon="@Icons.Material.Filled.Delete"/>
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <div class="mt-4 d-flex justify-between">
        <MudButton OnClick="Decrement" Disabled="@(_currentPage <= 1)" Color="Color.Secondary">Назад</MudButton>
        <MudText Class="mx-2">@_currentPage / @_totalPages</MudText>
        <MudButton OnClick="Increment" Disabled="@(_currentPage >= _totalPages)" Color="Color.Primary">Далее</MudButton>
    </div>
}

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public int PocketId { get; set; }

    private PageData<PocketItem>? _pocketItems = new();
    private int _currentPage = 1;
    private int _totalPages = 1;
    private const int PageSize = 15;
    private bool _isLoading;
    private string ApiBaseUrl => Configuration["ApiBaseUrl"];

    protected override async Task OnInitializedAsync()
    {
        await LoadPocketItems();
    }

    private async Task ConfirmDelete(string name, int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Подтверждение",
            markupMessage: (MarkupString)$"Вы уверены, что хотите удалить товар <b>{name}</b>?",
            yesText: "Удалить", cancelText: "Отмена", options: new DialogOptions { CloseButton = true });

        if (result == true)
        {
            await DeleteItem(id);
        }
    }

    private async Task DeleteItem(int id)
    {
        try
        {
            var url = $"{ApiBaseUrl}/PocketItem/Delete?Id={id}";
            var request = new HttpRequestMessage(HttpMethod.Delete, url);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                await LoadPocketItems(); // Refresh the list
            }
            else
            {
                Console.WriteLine($"Ошибка при удалении товара ID {id}: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при удалении товара ID {id}: {ex.Message}");
        }
    }


    private async Task LoadPocketItems()
    {
        _isLoading = true;

        try
        {
            var url = $"{ApiBaseUrl}/PocketItem/GetPocketItemsByPocketId?PocketId={PocketId}&Page={_currentPage}&PageSize={PageSize}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();

                _pocketItems = JsonSerializer.Deserialize<PageData<PocketItem>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                _pocketItems.TotalPages = (int)Math.Ceiling((double)_pocketItems.TotalCount / PageSize);
            }
            else
            {
                _pocketItems.Items = [];
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Не удалось загрузить товары в пакете: " + ex.Message);
        }

        _isLoading = false;
    }

    private async Task Increment()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadPocketItems();
        }
    }

    private async Task Decrement()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadPocketItems();
        }
    }

    private void Close() => MudDialog.Cancel();
}
