@using System.Net.Http.Headers
@using MudBlazor.Components.Service
@inject HttpClient Http
@inject IConfiguration Configuration
@inject AuthService AuthService

<MudDialog>
    <DialogContent>

        @if (IsLoading)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" Class="my-4"/>
            <MudText Typo="Typo.subtitle1">Загружается текущая цена...</MudText>
        }
        else if (LoadError != null)
        {
            <MudText Color="Color.Error">@LoadError</MudText>
        }
        else
        {
            <MudPaper Class="pa-4 mb-3" Elevation="1">
                <MudText Typo="Typo.h6">Текущая цена</MudText>
                <MudDivider Class="my-2"/>
                <MudText>
                    <b>Цена за кг:</b> @PriceInfo?.pricePerKg.ToString() TJS<br/>
                    <b>Дата создания:</b> @PriceInfo?.createdAt.ToLocalTime().ToString("g")
                </MudText>
            </MudPaper>

            <MudTextField @bind-Value="NewPriceInput"
                          Label="Новая цена (в сомони)"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Adornment="Adornment.End"
                          AdornmentText="сом"
                          Immediate="true"
                          Class="mb-3"
                          Style="max-width: 300px;"/>

            <MudStack Row="true" Spacing="2">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="@SubmitPrice"
                           Disabled="@IsSubmitting">
                    @(IsSubmitting ? "Отправка..." : "Сохранить")
                </MudButton>

                <MudButton Variant="Variant.Text"
                           Color="Color.Default"
                           OnClick="() => MudDialog.Cancel()"
                           Disabled="@IsSubmitting">
                    Отмена
                </MudButton>
            </MudStack>

            @if (SubmitError != null)
            {
                <MudText Color="Color.Error" Class="mt-2">@SubmitError</MudText>
            }
        }

    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    private class PriceResponse
    {
        public double pricePerKg { get; set; }
        public int id { get; set; }
        public DateTime createdAt { get; set; }
        public bool isDeleted { get; set; }
    }

    private class PriceChangeRequest
    {
        public double newPrice { get; set; }
    }

    private PriceResponse? PriceInfo;
    private bool IsLoading = true;
    private bool IsSubmitting = false;
    private string? LoadError;
    private string? SubmitError;
    private string? NewPriceInput;
    private string? ApiBaseUrl => Configuration["ApiBaseUrl"];


    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentPrice();
    }

    private async Task LoadCurrentPrice()
    {
        IsLoading = true;
        LoadError = null;

        try
        {
            var token = AuthService.Token; 

            var request = new HttpRequestMessage(HttpMethod.Get, $"{ApiBaseUrl}/api/PriceList/GetPrice");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                PriceInfo = await response.Content.ReadFromJsonAsync<PriceResponse>();
            }
            else
            {
                LoadError = $"Ошибка загрузки цены: {response.StatusCode}";
                PriceInfo = new PriceResponse(); // Fallback
            }
        }
        catch (Exception ex)
        {
            LoadError = $"Ошибка: {ex.Message}";
            PriceInfo = new PriceResponse
            {
                createdAt = default,
                pricePerKg = 0.0
            };
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task SubmitPrice()
    {
        SubmitError = null;

        if (!double.TryParse(NewPriceInput, out var newPrice))
        {
            SubmitError = "Введите корректную числовую цену.";
            return;
        }

        IsSubmitting = true;

        try
        {
            var requestContent = JsonContent.Create(new PriceChangeRequest { newPrice = newPrice });

            var httpRequest = new HttpRequestMessage(HttpMethod.Post, $"{ApiBaseUrl}/api/PriceList/PriceChanger")
            {
                Content = requestContent
            };

            httpRequest.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(httpRequest);

            if (response.IsSuccessStatusCode)
            {
                MudDialog.Close(DialogResult.Ok(newPrice));
            }
            else
            {
                SubmitError = $"Ошибка при сохранении: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            SubmitError = $"Системная ошибка: {ex.Message}";
        }
        finally
        {
            IsSubmitting = false;
        }
    }

}
