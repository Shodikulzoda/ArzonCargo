@page "/create-login"
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using MudBlazor.Components.Service
@using Stocky.Shared.Models.Enums
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject AuthService AuthService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<MudPaper Class="pa-6 mx-auto mt-6" MaxWidth="MaxWidth.Small" Style="border-radius: 16px;">
    <MudText Typo="Typo.h5" Class="mb-4">Create Login</MudText>

    <MudTextField @bind-Value="_loginModel.UserName"
                  Label="Username"
                  Variant="Variant.Outlined"
                  Required="true"/>

    <MudTextField @bind-Value="_loginModel.Password"
                  Label="Password"
                  Variant="Variant.Outlined"
                  InputType="InputType.Password"
                  Required="true"/>

    <MudSelect @bind-Value="_loginModel.UserRole"
               Label="Role"
               Variant="Variant.Outlined"
               Required="true"
               Class="mt-2">
        @foreach (var role in Enum.GetValues<Role>())
        {
            <MudSelectItem Value="role">@role.ToString()</MudSelectItem>
        }
    </MudSelect>

    <MudButton Color="Color.Primary"
               Variant="Variant.Filled"
               Class="mt-4"
               OnClick="SubmitAsync">Create
    </MudButton>
</MudPaper>

@code {
    private CreateUserLoginRequest _loginModel = new();
    private bool _isAdmin;
    private string? ApiBaseUrl => Configuration["ApiBaseUrl"];

    protected override async Task OnInitializedAsync()
    {
        await AuthService.LoadTokenAsync();
        _isAdmin = AuthService.IsAdmin;
        if (!_isAdmin)
        {
            NavigationManager.NavigateTo("/UnAuthorized");
        }
        else if (_isAdmin)
        {
        }
        else
        {
            NavigationManager.NavigateTo("/UnAuthorized");
        }

        _loginModel.UserRole = Role.Adder;
    }

    private async Task SubmitAsync()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"{ApiBaseUrl}/api/Auth/CreateUsersLogin")
            {
                Content = JsonContent.Create(_loginModel)
            };

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("User login created successfully", Severity.Success);
                _loginModel = new() { UserRole = Role.Adder };
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Exception: {ex.Message}", Severity.Error);
        }
    }

    public class CreateUserLoginRequest
    {
        public string UserName { get; set; }
        public string Password { get; set; }
        public Role UserRole { get; set; }
    }

}
