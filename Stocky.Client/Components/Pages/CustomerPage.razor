@page "/goods"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using MudBlazor.Components.Layout
@inject IConfiguration Configuration
@layout NoNavbar

<PageTitle>Мои заказы</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="px-2 px-sm-3 px-md-4">
    <MudPaper Class="pa-3 mb-4" Style="border-radius:12px; background-color:rgba(255,255,255,0.05);">
        <MudText Typo="Typo.h4" Class="font-weight-bold" Color="Color.Primary">ArzonCargo</MudText>
    </MudPaper>

    <MudPaper Class="pa-4" Style="min-height: 60vh;">
        <MudText Typo="Typo.h5" Class="mb-4">Мои заказы</MudText>

        @if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            <MudAlert Severity="Severity.Error">Телефон не найден в URL.</MudAlert>
        }
        else if (isLoading)
        {
            <div class="d-flex justify-center my-6">
                <MudProgressCircular Indeterminate Color="Color.Primary" Size="Size.Large"/>
            </div>
        }
        else
        {
            @if (currentUser != null)
            {
                <MudPaper Class="pa-3 mb-4 d-flex align-center shadow-sm flex-wrap"
                          Style="border-radius:12px; background-color:rgba(255,255,255,0.08);">
                    <MudAvatar Color="Color.Primary" Size="Size.Large" Class="mr-3"
                               Style="font-size:24px; font-weight:bold;">
                        @currentUser.Name.Substring(0, 1).ToUpper()
                    </MudAvatar>
                    <div>
                        <MudText Typo="Typo.h6" Class="font-weight-bold"
                                 Color="Color.Primary">@currentUser.Name</MudText>
                        <MudText Typo="Typo.subtitle2" Color="Color.Info">@phoneNumber (@currentUser.Address)</MudText>
                    </div>
                </MudPaper>
            }

            @if (allItems.Count == 0)
            {
                <MudText Typo="Typo.subtitle1" Class="text-center mt-6" Color="Color.Secondary">Заказы не найдены.
                </MudText>
            }
            else
            {
                <div class="d-flex flex-column" style="gap:1rem;">
                    @foreach (var item in allItems)
                    {
                        <MudPaper Class="pa-3"
                                  Style="border-radius:12px; background-color:rgba(255,255,255,0.05); box-shadow: 0 1px 4px rgba(0,0,0,0.1);">
                            <div class="d-flex justify-between align-center flex-wrap">
                                <MudText Typo="Typo.subtitle1" Class="font-weight-bold mb-1" Color="Color.Primary">
                                    #@item.Id
                                </MudText>
                                <MudChip T="string" Color="@((item.IsCompleted) ? Color.Success : Color.Info)"
                                         Variant="Variant.Outlined" Class="mb-1">
                                    @(item.IsCompleted ? "Завершен" : "Готов к выдаче")
                                </MudChip>
                            </div>
                            <MudText Typo="Typo.body1" Class="mb-1"><b>Штрихкод:</b> @item.ProductBarCode</MudText>
                            <MudText Typo="Typo.body1" Class="mb-1"><b>Продукт ID:</b> @item.ProductId</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                Дата: @item.CreatedAt.ToLocalTime().ToString("g")</MudText>
                        </MudPaper>
                    }
                </div>

                <div class="d-flex justify-between mt-6">
                    <MudButton Variant="Variant.Filled" Disabled="!HasPreviousPage" OnClick="LoadPreviousPage"
                               Style="min-width:100px;">
                        Назад
                    </MudButton>
                    <MudButton Variant="Variant.Filled" Disabled="!HasNextPage" OnClick="LoadNextPage"
                               Style="min-width:100px;">
                        Далее
                    </MudButton>
                </div>
            }
        }
    </MudPaper>

    <MudPaper Class="pa-4 mt-4 mb-4" Style="border-radius:12px; background-color:rgba(255,255,255,0.05);">
        <div class="d-flex justify-center flex-wrap" style="gap: 1.5rem;">
            <MudTooltip Text="Instagram">
                <MudIconButton Color="Color.Primary" Icon="@Icons.Custom.Brands.Instagram" Size="Size.Large"
                               OnClick='@(() => OpenLink("https://instagram.com/arzoncargo"))'>
                    <MudImage Src="instaicon.webp" Alt="Instagram" Width="28" Height="28"/>
                </MudIconButton>
            </MudTooltip>

            <MudTooltip Text="Telegram">
                <MudIconButton Icon="@Icons.Custom.Brands.Telegram" Color="Color.Primary" Size="Size.Large"
                               OnClick="@(() => OpenLink("https://t.me/arzoncargo"))"/>
            </MudTooltip>

            <MudTooltip Text="Позвонить">
                <MudIconButton Icon="@Icons.Material.Filled.Phone" Color="Color.Primary" Size="Size.Large"
                               OnClick="@(() => OpenLink("tel:+998901234567"))"/>
            </MudTooltip>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private string? phoneNumber;
    private int currentPage = 1;
    private const int pageSize = 10;
    private bool isLoading = true;
    private string? ApiBaseUrl => Configuration["ApiBaseUrl"];
    private User? currentUser;
    private PaginatedResult<PocketItem>? pocketPage;
    private PaginatedResult<OrderItem>? orderPage;
    private List<OrderViewItem> allItems = new();

    private bool HasNextPage => pocketPage?.HasNextPage == true || orderPage?.HasNextPage == true;
    private bool HasPreviousPage => pocketPage?.HasPreviousPage == true || orderPage?.HasPreviousPage == true;

    private readonly JsonSerializerOptions _jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true
    };

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("phone", out var phoneValues))
        {
            phoneNumber = phoneValues.FirstOrDefault();
        }

        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            isLoading = false;
            return;
        }

        try
        {
            var userResponse = await Http.GetAsync($"{ApiBaseUrl}/User/Search?Text={phoneNumber}");
            var userJson = await userResponse.Content.ReadAsStringAsync();

            if (string.IsNullOrWhiteSpace(userJson) || userJson == "[]")
            {
                isLoading = false;
                Navigation.NavigateTo("/UnAuthorized", true);
                return;
            }

            if (userJson.TrimStart().StartsWith("["))
            {
                var users = JsonSerializer.Deserialize<List<User>>(userJson, _jsonOptions);
                if (!users.Any())
                    Navigation.NavigateTo("/UnAuthorized", true);
                
                currentUser = users?.FirstOrDefault();
            }
            else
            {
                currentUser = JsonSerializer.Deserialize<User>(userJson, _jsonOptions);
            }

            if (currentUser == null)
            {
                isLoading = false;
                return;
            }

            await LoadData();
        }
        catch
        {
            isLoading = false;
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        allItems.Clear();

        try
        {
            var encodedPhone = Uri.EscapeDataString(phoneNumber!);

            var pocketResponse = await Http.GetAsync($"{ApiBaseUrl}/PocketItem/GetPocketItemByPhoneNumber?Page={currentPage}&PageSize={pageSize}&PhoneNumber={encodedPhone}");
            var pocketJson = await pocketResponse.Content.ReadAsStringAsync();
            pocketPage = JsonSerializer.Deserialize<PaginatedResult<PocketItem>>(pocketJson, _jsonOptions);

            var orderResponse = await Http.GetAsync($"{ApiBaseUrl}/OrderItem/GetOrderItemByPhoneNumber?Page={currentPage}&PageSize={pageSize}&PhoneNumber={encodedPhone}");
            var orderJson = await orderResponse.Content.ReadAsStringAsync();
            orderPage = JsonSerializer.Deserialize<PaginatedResult<OrderItem>>(orderJson, _jsonOptions);

            var pockets = pocketPage?.Items?.Select(p => new OrderViewItem
            {
                Id = p.Id,
                ProductId = p.ProductId,
                ProductBarCode = p.ProductBarCode,
                CreatedAt = p.CreatedAt,
                Type = "Кошелек",
                IsCompleted = false
            }) ?? Enumerable.Empty<OrderViewItem>();

            var orders = orderPage?.Items?.Select(o => new OrderViewItem
            {
                Id = o.Id,
                ProductId = o.ProductId,
                ProductBarCode = o.ProductBarCode,
                CreatedAt = o.CreatedAt,
                Type = "Заказ",
                IsCompleted = true
            }) ?? Enumerable.Empty<OrderViewItem>();

            allItems = pockets
                .Concat(orders)
                .OrderBy(item => item.IsCompleted)
                .ThenByDescending(item => item.CreatedAt)
                .ToList();
        }
        catch
        {
            // Handle errors if needed
        }

        isLoading = false;
    }

    private async Task LoadNextPage()
    {
        currentPage++;
        await LoadData();
    }

    private async Task LoadPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadData();
        }
    }

    private void OpenLink(string url)
    {
        Navigation.NavigateTo(url, forceLoad: true);
    }

    public class OrderViewItem
    {
        public int Id { get; set; }
        public string ProductBarCode { get; set; } = "";
        public int ProductId { get; set; }
        public DateTime CreatedAt { get; set; }
        public string Type { get; set; } = "";
        public bool IsCompleted { get; set; }
    }

    public class PaginatedResult<T>
    {
        public List<T> Items { get; set; } = new();
        public int PageNumber { get; set; }
        public int TotalPages { get; set; }
        public int TotalCount { get; set; }
        public bool HasPreviousPage { get; set; }
        public bool HasNextPage { get; set; }
    }

    public class PocketItem
    {
        public int Id { get; set; }
        public string ProductBarCode { get; set; } = "";
        public int ProductId { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class OrderItem
    {
        public int Id { get; set; }
        public string ProductBarCode { get; set; } = "";
        public int ProductId { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string PhoneNumber { get; set; } = "";
        public string Address { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public bool IsDeleted { get; set; }
    }

}
