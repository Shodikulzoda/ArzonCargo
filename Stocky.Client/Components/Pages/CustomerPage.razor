@page "/goods"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using MudBlazor.Components.Layout
@layout NoNavbar

<PageTitle>Мои заказы</PageTitle>

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5" Class="mb-4">Мои заказы</MudText>

    @if (string.IsNullOrWhiteSpace(phoneNumber))
    {
        <MudAlert Severity="Severity.Error">Телефон не найден в URL.</MudAlert>
    }
    else if (isLoading)
    {
        <MudProgressCircular Indeterminate Color="Color.Primary" />
    }
    else
    {
        @if (currentUser != null)
        {
            <MudPaper Class="pa-2 mb-3 d-flex align-center shadow-sm"
                      Style="border-radius:12px; background-color:rgba(255,255,255,0.08);">
                <MudAvatar Color="Color.Primary" Size="Size.Medium" Class="mr-3">
                    @currentUser.Name.Substring(0,1).ToUpper()
                </MudAvatar>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="font-weight-bold" Color="Color.Primary">@currentUser.Name</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Info">
                        @phoneNumber (@currentUser.Address)
                    </MudText>
                </div>
            </MudPaper>


        }

        <MudTable Items="allItems" Hover="true" Dense="true" Elevation="1">
            <HeaderContent>
                <MudTh>№</MudTh>
                <MudTh>Штрихкод</MudTh>
                <MudTh>Продукт ID</MudTh>
                <MudTh>Дата</MudTh>
                <MudTh>Статус</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Id</MudTd>
                <MudTd>@context.ProductBarCode</MudTd>
                <MudTd>@context.ProductId</MudTd>
                <MudTd>@context.CreatedAt.ToLocalTime().ToString("g")</MudTd>
                <MudTd>
                    @if (context.IsCompleted)
                    {
                        <MudChip T="string" Color="Color.Success" Variant="Variant.Outlined">Завершен</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Info" Variant="Variant.Filled">Готов к выдаче</MudChip>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>

        <div class="d-flex justify-between mt-4">
            <MudButton Variant="Variant.Text" Disabled="!HasPreviousPage" OnClick="LoadPreviousPage">Назад</MudButton>
            <MudButton Variant="Variant.Text" Disabled="!HasNextPage" OnClick="LoadNextPage">Далее</MudButton>
        </div>
    }
</MudPaper>

@code {
    private string? phoneNumber;
    private int currentPage = 1;
    private const int pageSize = 10;
    private bool isLoading = true;

    private User? currentUser;
    private PaginatedResult<PocketItem>? pocketPage;
    private PaginatedResult<OrderItem>? orderPage;
    private List<OrderViewItem> allItems = new();

    private bool HasNextPage => pocketPage?.HasNextPage == true || orderPage?.HasNextPage == true;
    private bool HasPreviousPage => pocketPage?.HasPreviousPage == true || orderPage?.HasPreviousPage == true;

    private readonly JsonSerializerOptions _jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true
    };

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("phone", out var phoneValues))
        {
            phoneNumber = phoneValues.FirstOrDefault();
        }

        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            Console.WriteLine("Phone number missing.");
            isLoading = false;
            return;
        }

        try
        {
            var userResponse = await Http.GetAsync($"http://localhost:5191/User/Search?Text={phoneNumber}");
            var userJson = await userResponse.Content.ReadAsStringAsync();
            Console.WriteLine("User JSON: " + userJson);

            if (string.IsNullOrWhiteSpace(userJson) || userJson == "null")
            {
                Console.WriteLine("User not found.");
                isLoading = false;
                return;
            }

            try
            {
                if (userJson.TrimStart().StartsWith("["))
                {
                    var users = JsonSerializer.Deserialize<List<User>>(userJson, _jsonOptions);
                    currentUser = users?.FirstOrDefault();
                }
                else
                {
                    currentUser = JsonSerializer.Deserialize<User>(userJson, _jsonOptions);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Deserialization error: " + ex.Message);
            }

            if (currentUser == null)
            {
                Console.WriteLine("User is null after deserialization.");
                isLoading = false;
                return;
            }

            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to load user: " + ex.Message);
            isLoading = false;
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        allItems.Clear();

        try
        {
            var encodedPhone = Uri.EscapeDataString(phoneNumber!);

            var pocketResponse = await Http.GetAsync($"http://localhost:5191/PocketItem/GetPocketItemByPhoneNumber?Page={currentPage}&PageSize={pageSize}&PhoneNumber={encodedPhone}");
            var pocketJson = await pocketResponse.Content.ReadAsStringAsync();
            pocketPage = JsonSerializer.Deserialize<PaginatedResult<PocketItem>>(pocketJson, _jsonOptions);

            var orderResponse = await Http.GetAsync($"http://localhost:5191/OrderItem/GetOrderItemByPhoneNumber?Page={currentPage}&PageSize={pageSize}&PhoneNumber={encodedPhone}");
            var orderJson = await orderResponse.Content.ReadAsStringAsync();
            orderPage = JsonSerializer.Deserialize<PaginatedResult<OrderItem>>(orderJson, _jsonOptions);

            var pockets = pocketPage?.Items?.Select(p => new OrderViewItem
            {
                Id = p.Id,
                ProductId = p.ProductId,
                ProductBarCode = p.ProductBarCode,
                CreatedAt = p.CreatedAt,
                Type = "Кошелек",
                IsCompleted = false
            }) ?? Enumerable.Empty<OrderViewItem>();

            var orders = orderPage?.Items?.Select(o => new OrderViewItem
            {
                Id = o.Id,
                ProductId = o.ProductId,
                ProductBarCode = o.ProductBarCode,
                CreatedAt = o.CreatedAt,
                Type = "Заказ",
                IsCompleted = true
            }) ?? Enumerable.Empty<OrderViewItem>();

            allItems = pockets
                .Concat(orders)
                .OrderBy(item => item.IsCompleted)
                .ThenByDescending(item => item.CreatedAt)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading data: " + ex.Message);
        }

        isLoading = false;
    }

    private async Task LoadNextPage()
    {
        currentPage++;
        await LoadData();
    }

    private async Task LoadPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadData();
        }
    }

    public class OrderViewItem
    {
        public int Id { get; set; }
        public string ProductBarCode { get; set; } = "";
        public int ProductId { get; set; }
        public DateTime CreatedAt { get; set; }
        public string Type { get; set; } = "";
        public bool IsCompleted { get; set; }
    }

    public class PaginatedResult<T>
    {
        public List<T> Items { get; set; } = new();
        public int PageNumber { get; set; }
        public int TotalPages { get; set; }
        public int TotalCount { get; set; }
        public bool HasPreviousPage { get; set; }
        public bool HasNextPage { get; set; }
    }

    public class PocketItem
    {
        public int Id { get; set; }
        public string ProductBarCode { get; set; } = "";
        public int ProductId { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class OrderItem
    {
        public int Id { get; set; }
        public string ProductBarCode { get; set; } = "";
        public int ProductId { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string PhoneNumber { get; set; } = "";
        public string Address { get; set; } = "";
        public DateTime CreatedAt { get; set; }
        public bool IsDeleted { get; set; }
    }
}
