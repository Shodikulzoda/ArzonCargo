@page "/products"
@using System.Net.Http.Headers
@using System.Text.Json
@using MudBlazor.Components.DialogWindows.ProductDialogs
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@using Stocky.Shared.Models.Enums
@inject HttpClient Http
@inject IDialogService DialogService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<PageTitle>Продукты</PageTitle>

@if (!_isAuthorized)
{
    <MudText Color="Color.Error" Typo="Typo.h6">Доступ запрещён. Перенаправление...</MudText>
}
else
{
    <MudText Typo="Typo.h4" GutterBottom="true">Таблица продуктов</MudText>

    <div class="mb-4 d-flex gap-2 flex-wrap">
        <MudTextField @bind-Value="_searchQuery"
                      Placeholder="Поиск по названию, штрихкоду и т.д..."
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Immediate="true"
                      OnKeyDown="HandleKeyDown"
                      Margin="Margin.Dense"/>
        <MudButton OnClick="SearchProduct" Color="Color.Primary" Variant="Variant.Filled">Поиск</MudButton>
    </div>

    <div class="mb-4 d-flex gap-2 flex-wrap align-center">
        <MudDatePicker Label="С даты" @bind-Date="_startDate" DateFormat="dd.MM.yyyy" Clearable="true"/>
        <MudDatePicker Label="По дату" @bind-Date="_endDate" DateFormat="dd.MM.yyyy" Clearable="true"/>

        <MudButton OnClick="FilterByDate" Color="Color.Info" Variant="Variant.Filled">
            Фильтр по дате
        </MudButton>

        <MudButton OnClick="ClearDateFilter" Color="Color.Secondary" Variant="Variant.Text">
            Сбросить
        </MudButton>
    </div>

    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
    }
    else
    {
        <MudTable Items="_productPage?.Items" Hover="true" SortLabel="Сортировать по" Elevation="1" Dense="true">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Id)">Id</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Product, object>(x => x.BarCode ?? string.Empty)">Штрихкод</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Status)">Статус</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Product, object>(x => x.CreatedAt.ToLocalTime())">Дата
                        создания
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>Действия</MudTh>
            </HeaderContent>

            <RowTemplate>
                @if (@context.Status == Status.Completed)
                {
                    <MudTd
                        Style="@($"color:{_theme.PaletteLight.White};background:{_theme.PaletteLight.SuccessDarken};")"
                        DataLabel="Id">@context.Id</MudTd>
                    <MudTd
                        Style="@($"color:{_theme.PaletteLight.White};background:{_theme.PaletteLight.SuccessDarken};")"
                        DataLabel="Name">@context.BarCode</MudTd>
                    <MudTd
                        Style="@($"color:{_theme.PaletteLight.White};background:{_theme.PaletteLight.SuccessDarken};")"
                        DataLabel="Status">@context.Status</MudTd>
                    <MudTd
                        Style="@($"color:{_theme.PaletteLight.White};background:{_theme.PaletteLight.SuccessDarken};")"
                        DataLabel="Дата создания">@context.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</MudTd>
                    <MudTd
                        Style="@($"color:{_theme.PaletteLight.White};background:{_theme.PaletteLight.SuccessDarken};")">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       OnClick="@(() => Update(context))"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       OnClick="@(() => Delete(context.Id))"/>
                    </MudTd>
                }
                else
                {
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Name">@context.BarCode</MudTd>
                    <MudTd DataLabel="Status">@context.Status</MudTd>
                    <MudTd
                        DataLabel="Дата создания">@context.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       OnClick="@(() => Update(context))"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       OnClick="@(() => Delete(context.Id))"/>
                    </MudTd>
                }
            </RowTemplate>

        </MudTable>

        <div class="mt-4 d-flex justify-between">
            <MudButton OnClick="Decrement" Disabled="@(_currentPage <= 1)" Color="Color.Secondary">Назад</MudButton>
            <MudText Class="mx-2">@_currentPage / @_totalPages</MudText>
            <MudButton OnClick="Increment" Disabled="@(_currentPage >= _totalPages)" Color="Color.Primary">Вперёд
            </MudButton>
        </div>
    }
}

@code {
    private readonly MudTheme _theme = new();

    private PageData<Product>? _productPage = new();

    private int _currentPage = 1;
    private int _totalPages = 1;
    private const int PageSize = 15;
    private bool _isLoading;
    private string _searchQuery = "";
    private bool _isAuthorized;
    private string? ApiBaseUrl => Configuration["ApiBaseUrl"];

    private DateTime? _startDate = DateTime.UtcNow.AddDays(-30);
    private DateTime? _endDate = DateTime.UtcNow;

    protected override async Task OnInitializedAsync()
    {
        await AuthService.LoadTokenAsync();

        if (string.IsNullOrEmpty(AuthService.Token))
        {
            NavigationManager.NavigateTo("/Unauthorized", true);
            return;
        }

        var role = await AuthService.GetUserRoleAsync();

        if (role != "Admin")
        {
            NavigationManager.NavigateTo("/Unauthorized", true);
            return;
        }

        _isAuthorized = true;

        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        _isLoading = true;
        try
        {
            var url = $"{ApiBaseUrl}/Product/ProductPagination?Page={_currentPage}&PageSize={PageSize}";

            if (_startDate.HasValue)
                url += $"&DateFrom={_startDate.Value:yyyy-MM-ddTHH:mm:ssZ}";

            if (_endDate.HasValue)
                url += $"&DateTo={_endDate.Value:yyyy-MM-ddTHH:mm:ssZ}";

            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                _productPage = JsonSerializer.Deserialize<PageData<Product>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (_productPage?.Items != null)
                {
                    _productPage.Items = _productPage.Items.OrderByDescending(x => x.Status == Status.Created).ToList();
                    _totalPages = (int)Math.Ceiling((double)_productPage.TotalCount / PageSize);
                }
                else
                {
                    if (_productPage != null)
                    {
                        _productPage.Items = new List<Product>();
                    }
                }
            }
            else
            {
                Console.WriteLine($"Ошибка загрузки продуктов: {response.StatusCode}");
                _productPage = new PageData<Product> { Items = new List<Product>(), TotalCount = 0 };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading products: " + ex.Message);
            _productPage = new PageData<Product> { Items = new List<Product>(), TotalCount = 0 };
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task FilterByDate()
    {
        _currentPage = 1;
        await LoadProducts();
    }

    private async Task ClearDateFilter()
    {
        _startDate = null;
        _endDate = null;
        _currentPage = 1;
        await LoadProducts();
    }

    private async Task Delete(int productId)
    {
        var parameters = new DialogParameters
        {
            { "ProductId", productId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialogReference = await DialogService.ShowAsync<DeleteProductDialog>("Удалить продукт", parameters, options);
        var dialogReferenceResult = await dialogReference.Result;

        if (dialogReferenceResult is not null && !dialogReferenceResult.Canceled)
        {
            await LoadProducts();
        }
    }

    private async Task Update(Product product)
    {
        var parameters = new DialogParameters
        {
            {
                "Product", new Product
                {
                    Id = product.Id,
                    BarCode = product.BarCode,
                    Status = product.Status
                }
            },
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<EditProductDialog>("Редактировать продукт", parameters, options);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadProducts();
        }
    }

    private async Task SearchProduct()
    {
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            await LoadProducts();
            return;
        }

        _isLoading = true;
        try
        {
            var url = $"{ApiBaseUrl}/Product/Search?Text={Uri.EscapeDataString(_searchQuery)}";

            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var searchResult = JsonSerializer.Deserialize<IEnumerable<Product>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (_productPage != null)
                {
                    _productPage.Items = searchResult?.ToList() ?? new List<Product>();
                }

                _totalPages = 1;
                _currentPage = 1;
            }
            else
            {
                Console.WriteLine($"Ошибка поиска продуктов: {response.StatusCode}");

                if (_productPage != null)
                {
                    _productPage.Items = new List<Product>();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка поиска: " + ex.Message);

            if (_productPage != null)
            {
                _productPage.Items = new List<Product>();
            }
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task Increment()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadProducts();
        }
    }

    private async Task Decrement()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadProducts();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SearchProduct();
        }
    }

}
