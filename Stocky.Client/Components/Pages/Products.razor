@page "/products"
@inject HttpClient Http
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Authorization
@using MudBlazor.Components.DialogWindows.ProductDialogs
@using Stocky.Shared.Models
@using Stocky.Shared.Models.Enums
@attribute [Authorize]

<PageTitle>Продукты</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Таблица продуктов</MudText>

<div class="mb-4 d-flex gap-2">
    <MudTextField @bind-Value="_searchQuery"
                  Placeholder="Поиск по названию, телефону и т.д..."
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Immediate="true"
                  OnKeyDown="HandleKeyDown"
                  Margin="Margin.Dense"/>
    <MudButton OnClick="SearchProduct" Color="Color.Primary" Variant="Variant.Filled">Поиск</MudButton>
</div>

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudTable Items="_productPage?.Items" Hover="true" SortLabel="Сортировать по" Elevation="1" Dense="true">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Id)">Id</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Product, object>(x => x.BarCode)">Штрихкод</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Status)">Статус</MudTableSortLabel>
            </MudTh>
            <MudTh>Действия</MudTh>
        </HeaderContent>
        <RowTemplate>
            @if (@context.Status == Status.Completed)
            {
                <MudTd Style="@($"color:{_theme.PaletteLight.White};background:{_theme.PaletteLight.SuccessDarken};")"
                       DataLabel="Id">@context.Id</MudTd>
                <MudTd Style="@($"color:{_theme.PaletteLight.White};background:{_theme.PaletteLight.SuccessDarken};")"
                       DataLabel="Name">@context.BarCode</MudTd>
                <MudTd Style="@($"color:{_theme.PaletteLight.White};background:{_theme.PaletteLight.SuccessDarken};")"
                       DataLabel="Address">@context.Status</MudTd>
                <MudTd Style="@($"color:{_theme.PaletteLight.White};background:{_theme.PaletteLight.SuccessDarken};")">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Primary"
                                   OnClick="@(() => Update(context))"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   OnClick="@(() => Delete(context.Id))"/>
                </MudTd>
            }
            else
            {
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.BarCode</MudTd>
                <MudTd DataLabel="Address">@context.Status</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Primary"
                                   OnClick="@(() => Update(context))"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   OnClick="@(() => Delete(context.Id))"/>
                </MudTd>
            }
        </RowTemplate>
    </MudTable>

    <div class="mt-4 d-flex justify-between">
        <MudButton OnClick="Decrement" Disabled="@(_currentPage <= 1)" Color="Color.Secondary">Назад</MudButton>
        <MudText Class="mx-2">@_currentPage / @_totalPages</MudText>
        <MudButton OnClick="Increment" Disabled="@(_currentPage >= _totalPages)" Color="Color.Primary">Вперёд</MudButton>
    </div>
}

@code {
    private MudTheme _theme = new();

    private PageData<Product>? _productPage = new();

    private int _currentPage = 1;
    private int _totalPages = 1;
    private readonly int _pageSize = 15;
    private bool _isLoading;
    private string _searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        _isLoading = true;
        try
        {
            var url = $"http://localhost:5191/Product/ProductPagination?Page={_currentPage}&PageSize={_pageSize}";
            _productPage = await Http.GetFromJsonAsync<PageData<Product>>(url);

            _productPage.Items = _productPage.Items
                .OrderByDescending(x => x.Status == Status.Created);

            if (_productPage?.Items != null)
            {
                _totalPages = (int)Math.Ceiling((double)_productPage.TotalCount / _pageSize);
            }
            else
            {
                _productPage.Items = [];
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading users: " + ex.Message);
            _productPage.Items = [];
        }

        _isLoading = false;
    }

    private async Task Delete(int productId)
    {
        var parameters = new DialogParameters
        {
            { "ProductId", productId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialogReference = await DialogService.ShowAsync<DeleteProductDialog>("Удалить продукт", parameters, options);

        var dialogReferenceResult = await dialogReference.Result;

        if (dialogReferenceResult is not null)
        {
            if (!dialogReferenceResult.Canceled)
            {
                await LoadProducts();
            }
        }
    }

    private async Task Update(Product product)
    {
        var parameters = new DialogParameters
        {
            {
                "Product", new Product
                {
                    Id = product.Id,
                    Status = product.Status,
                }
            },
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<EditProductDialog>("Редактировать продукт", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
        {
            if (!result.Canceled)
            {
                await LoadProducts();
            }
        }
    }

    private async Task SearchProduct()
    {
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            await LoadProducts();
            return;
        }

        _isLoading = true;
        try
        {
            var url = $"http://localhost:5191/Product/Search?Text={Uri.EscapeDataString(_searchQuery)}";
            _productPage.Items = await Http.GetFromJsonAsync<IEnumerable<Product>>(url) ?? [];

            _totalPages = 1;
            _currentPage = 1;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка поиска: " + ex.Message);
            _productPage.Items = [];
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task Increment()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadProducts();
        }
    }

    private async Task Decrement()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadProducts();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SearchProduct();
        }
    }

}