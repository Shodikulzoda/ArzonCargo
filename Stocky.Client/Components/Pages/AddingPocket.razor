@page "/create-pocket"
@using System.Net.Http.Headers
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@inject HttpClient Http
@inject AuthService AuthService
@inject IJSRuntime Js

<MudPaper Class="pa-6" Style="max-width:600px">
    <MudText Typo="Typo.h5">Create New Pocket</MudText>

    <MudTextField @bind-Value="_pocketModel.TotalAmount" Label="Total Amount"/>
    <MudTextField @bind-Value="_pocketModel.TotalWeight" Label="Total Weight"/>
    <MudTextField @bind-Value="_pocketModel.UserId" Label="UserId"/>

    <MudButton Color="Color.Primary" OnClick="CreatePocket">
        Create Pocket
    </MudButton>

    @if (_pocketCreated)
    {
        <MudDivider Class="my-4"/>

        <MudText Typo="Typo.h6">Pocket Barcode: @_pocketModel.BarCode</MudText>

        <MudTextField @bind-Value="_productBarCode"
                      Label="Scan Product Barcode"
                      Immediate="true"
                      OnKeyDown="HandleKeyDown"
                      Class="barcode-text"/>

        <MudButton OnClick="AddProductToPocket">Add Product</MudButton>

        <MudTable Items="_pocketItems">
            <HeaderContent>
                <MudTh>Barcode</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.ProductBarCode</MudTd>
            </RowTemplate>
        </MudTable>

        <MudButton Color="Color.Success" OnClick="FinishPocket">
            Finish Sale
        </MudButton>
    }
    <MudText Color="Color.Success" Class="mt-2">@_message</MudText>
</MudPaper>

<script>
    window.focusElement = () => {
        const el = document.querySelector('.barcode-text input');
        if (el) {
            el.value = '';
            el.focus();
        }
    };
</script>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    private Pocket? _pocketModel = new();
    private bool _pocketCreated;
    private string? _message = "";

    private string? _productBarCode;
    private List<PocketItem> _pocketItems = [];

    private async Task CreatePocket()
    {
        var request = new HttpRequestMessage(HttpMethod.Post, "http://localhost:5191/Pocket/CreatePocket");

        request.Content = JsonContent.Create(_pocketModel);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            _pocketModel = await response.Content.ReadFromJsonAsync<Pocket>();
            _pocketCreated = true;
        }
    }

    private async Task AddProductToPocket()
    {
        if (string.IsNullOrWhiteSpace(_productBarCode)) return;

        var pocketItem = new PocketItem
        {
            PocketId = _pocketModel.Id,
            ProductBarCode = _productBarCode,
        };

        var request = new HttpRequestMessage(HttpMethod.Post, "http://localhost:5191/PocketItem/Add");
        request.Content = JsonContent.Create(pocketItem);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            _pocketItems.Add(pocketItem);
            _productBarCode = "";
            await Js.InvokeVoidAsync("focusElement");
        }
    }

    private async Task FinishPocket()
    {
        var request = new HttpRequestMessage(HttpMethod.Put, "http://localhost:5191/Pocket/UpdatePocket");

        request.Content = JsonContent.Create(_pocketModel);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            _message = "created successfully";
            _pocketItems.Clear();
            await Js.InvokeVoidAsync("focusElement");
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key is "Enter" or "NumpadEnter")
        {
            await AddProductToPocket();
        }
    }

}
