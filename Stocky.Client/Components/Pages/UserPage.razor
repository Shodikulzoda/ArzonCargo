@page "/users"
@inject HttpClient Http
@inject IDialogService DialogService
@inject AuthService AuthService
@using System.Net.Http.Headers
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using MudBlazor.Components.DialogWindows.UserDialogs
@using MudBlazor.Components.Service
@using ReferenceClass.Models
@attribute [Authorize]

<PageTitle>UserPage</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">UserPage Table</MudText>

<div class="mb-4 d-flex gap-2">
    <MudTextField @bind-Value="_searchQuery"
                  Placeholder="GetUserBySearch by name, phone, etc..."
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Immediate="true"
                  OnKeyDown="HandleKeyDown"
                  Margin="Margin.Dense"/>
    <MudButton OnClick="SearchUsers" Color="Color.Primary" Variant="Variant.Filled">GetUserBySearch</MudButton>
    <MudButton OnClick="OpenCreateDialog" Color="Color.Success" Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add">
        Add User
    </MudButton>
</div>

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudTable Items="_userPage?.Items" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<User, object>(x => x.Id)">Id</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<User, object?>(x => x.Name)">Name</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<User, object?>(x => x.Phone)">Phone</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<User, object?>(x => x.Address)">Address</MudTableSortLabel>
            </MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd DataLabel="Phone">@context.Phone</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.ViewList"
                               Color="Color.Success"
                               OnClick="@(() => UserOrders(context.Id))"/>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Primary"
                               OnClick="@(() => Update(context))"/>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => Delete(context.Id))"/>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <div class="mt-4 d-flex justify-between">
        <MudButton OnClick="Decrement" Disabled="@(_currentPage <= 1)" Color="Color.Secondary">Back</MudButton>
        <MudText Class="mx-2">@_currentPage / @_totalPages</MudText>
        <MudButton OnClick="Increment" Disabled="@(_currentPage >= _totalPages)" Color="Color.Primary">Next</MudButton>
    </div>
}

@code {

    private PageData<User>? _userPage = new();

    private int _currentPage = 1;
    private int _totalPages = 1;
    private const int PageSize = 15;
    private bool _isLoading;
    private string _searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        _isLoading = true;
        try
        {
            var url = $"http://localhost:5191/User/UserPagination?Page={_currentPage}&PageSize={PageSize}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);

            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();

                _userPage = JsonSerializer.Deserialize<PageData<User>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                _totalPages = (int)Math.Ceiling((double)(_userPage?.TotalCount ?? 0) / PageSize);
            }
            else
            {
                if (_userPage != null)
                {
                    _userPage.Items = [];
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading users: " + ex.Message);

            if (_userPage != null)
            {
                _userPage.Items = [];
            }
        }

        _isLoading = false;
    }

    private async Task Delete(int userId)
    {
        var parameters = new DialogParameters
        {
            { "UserId", userId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<DeleteUserDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
        {
            if (!result.Canceled)
            {
                await LoadUsers();
            }
        }
    }

    private async Task UserOrders(int userId)
    {
        var parameters = new DialogParameters
        {
            { "UserId", userId }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialogReference = await DialogService.ShowAsync<OrdersPaginationUserDialog>("Orders for User", parameters, options);
        var dialogReferenceResult = await dialogReference.Result;

        if (dialogReferenceResult is not null)
        {
            if (!dialogReferenceResult.Canceled)
            {
                await LoadUsers();
            }
        }
    }

    private async Task Update(User user)
    {
        var parameters = new DialogParameters
        {
            {
                "UserModel", new User
                {
                    Id = user.Id,
                    Name = user.Name,
                    Phone = user.Phone,
                    Address = user.Address,
                }
            },
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<EditUserDialog>("Edit User", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
        {
            if (!result.Canceled)
            {
                await LoadUsers();
            }
        }
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters
        {
            { "UserModel", new User() }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<CreateUserDialog>("Create User", parameters, options);
        var result = await dialog.Result;

        if (result is not null)
        {
            if (!result.Canceled)
            {
                await LoadUsers();
            }
        }
    }

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            await LoadUsers();
            return;
        }

        _isLoading = true;
        try
        {
            var url = $"http://localhost:5191/User/Search?Text={Uri.EscapeDataString(_searchQuery)}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);
            
            var response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();

                _userPage.Items = JsonSerializer.Deserialize<List<User>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }

            _totalPages = 1;
            _currentPage = 1;
        }
        catch (Exception ex)
        {
            Console.WriteLine("GetUserBySearch error: " + ex.Message);

            if (_userPage != null)
            {
                _userPage.Items = [];
            }
        }

        _isLoading = false;
        StateHasChanged();
    }

    private async Task Increment()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadUsers();
        }
    }

    private async Task Decrement()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadUsers();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SearchUsers();
        }
    }

}
