@page "/"
@using MudBlazor.Components.Layout
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@layout NoNavbar

<div class="d-flex justify-center align-center" style="height: 70vh;">
    <MudGrid Class="ma-0 pa-6" Style="max-width: 600px;">
        <MudItem xs="12">
            <MudPaper Class="pa-6" Elevation="3">
                <MudForm>
                    <MudTextField T="string"
                                  @ref="_firstInput"
                                  @bind-Value="Data.UserName"
                                  Label="Имя пользователя"
                                  Class="mb-4"
                                  Error="@_isLoged"
                                  OnKeyDown="HandleKeyDown"
                                  ErrorText="Неверное имя пользователя или пароль" />

                    <MudTextField T="string"
                                  @ref="_secondInput"
                                  @bind-Value="Data.PasswordHash"
                                  Label="Пароль"
                                  InputType="InputType.Password"
                                  Class="mb-4"
                                  Error="@_isLoged"
                                  OnKeyDown="Enter"
                                  ErrorText="Неверное имя пользователя или пароль" />

                    <MudButton Variant="Variant.Filled"
                               OnClick="Submit"
                               Color="Color.Primary"
                               FullWidth="true">
                        Войти
                    </MudButton>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {
    private MudTextField<string> _firstInput = null!;
    private MudTextField<string> _secondInput = null!;

    [Parameter] public AuthenticationData Data { get; set; } = new();
    private bool _isLoged;

    protected override async Task OnInitializedAsync()
    {
        await AuthService.LoadTokenAsync();

        if (!string.IsNullOrWhiteSpace(AuthService.Token))
        {
            Navigation.NavigateTo("/home", true);
        }
    }

    private bool _isSubmitting = false;

    private async Task Submit()
    {
        if (_isSubmitting)
            return; 

        _isSubmitting = true;
        _isLoged = false; 
        StateHasChanged();

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5191/api/Auth/Verify", Data);

            if (response.IsSuccessStatusCode)
            {
                var resultText = await response.Content.ReadAsStringAsync();

                var loginResponse = new LoginResponse
                {
                    Token = resultText
                };

                if (!string.IsNullOrWhiteSpace(loginResponse.Token))
                {
                    AuthService.SetToken(loginResponse.Token);
                    _isLoged = false;
                    Navigation.NavigateTo("/home");
                }
                else
                {
                    _isLoged = true;
                }
            }
            else
            {
                _isLoged = true;
            }
        }
        catch
        {
            _isLoged = true;
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }
    
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Tab")
        {
            await _secondInput.FocusAsync();
        }
    }
    
    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Key is "Enter" or "NumpadEnter")
        {
            await Submit();
        }
    }
    
    public class LoginResponse
    {
        public string? Token { get; set; }
    }
}
