@page "/"
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using MudBlazor.Components.Layout
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@layout NoNavbar

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex justify-center align-center" Style="height: 70vh;">
    <MudPaper Class="pa-6" Elevation="6" Style="width:100%; border-radius: 16px;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Авторизация</MudText>
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <MudTextField T="string"
                          Label="Имя пользователя"
                          @bind-Value="loginModel.UserName"
                          Required="true"
                          Immediate="true"
                          Margin="Margin.Dense"
                          Error="@_isLoged"
                          ErrorText="Неверное имя пользователя или пароль"
                          Class="mb-3" />

            <MudTextField T="string"
                          Label="Пароль"
                          @bind-Value="loginModel.PasswordHash"
                          InputType="InputType.Password"
                          Required="true"
                          Immediate="true"
                          Margin="Margin.Dense"
                          Error="@_isLoged"
                          ErrorText="Неверное имя пользователя или пароль"
                          Class="mb-4" />

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       ButtonType="ButtonType.Submit"
                       Disabled="@_isSubmitting"
                       FullWidth="true">
                Войти
            </MudButton>
        </EditForm>

        @if (_isLoged)
        {
            <MudText Color="Color.Error" Class="mt-3">Ошибка входа. Проверьте введенные данные.</MudText>
        }
    </MudPaper>
</MudContainer>

@code {
    private bool _isSubmitting = false;
    private bool _isLoged = false;

    private AuthenticationData loginModel = new();

    protected override async Task OnInitializedAsync()
    {
        await AuthService.LoadTokenAsync();

        if (!string.IsNullOrWhiteSpace(AuthService.Token))
        {
            Navigation.NavigateTo("/home", true);
        }
    }

    private async Task HandleLogin()
    {
        _isSubmitting = true;
        _isLoged = false;
        StateHasChanged();

        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5191/api/Auth/Verify", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();

                if (!string.IsNullOrWhiteSpace(token))
                {
                    AuthService.SetToken(token);
                    Navigation.NavigateTo("/home");
                    return;
                }
            }

            _isLoged = true;
        }
        catch
        {
            _isLoged = true;
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }
}
