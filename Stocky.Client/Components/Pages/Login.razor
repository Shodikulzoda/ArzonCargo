@page "/admin-panel-93xk12sx0"
@using MudBlazor.Components.DialogWindows
@using MudBlazor.Components.Layout
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject IConfiguration Configuration
@inject IJSRuntime Js
@inject IDialogService DialogService

@layout NoNavbar

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex justify-center align-center" Style="height: 70vh;">
    <MudPaper Class="pa-6" Elevation="6" Style="width:100%; border-radius: 16px;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Авторизация</MudText>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator/>

            <MudTextField T="string"
                          Label="Имя пользователя"
                          @ref="usernameField"
                          @bind-Value="loginModel.UserName"
                          Required="true"
                          Immediate="true"
                          Margin="Margin.Dense"
                          Error="@_isLoged"
                          ErrorText="Неверное имя пользователя или пароль"
                          OnKeyDown="HandleKeyDown"
                          Class="mb-3 username-field"/>

            <MudTextField T="string"
                          Label="Пароль"
                          @bind-Value="loginModel.PasswordHash"
                          InputType="InputType.Password"
                          Required="true"
                          Immediate="true"
                          Margin="Margin.Dense"
                          Error="@_isLoged"
                          ErrorText="Неверное имя пользователя или пароль"
                          Class="mb-4 password-field"/>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       ButtonType="ButtonType.Submit"
                       Disabled="@_isSubmitting"
                       FullWidth="true">
                Войти
            </MudButton>
        </EditForm>
    </MudPaper>
</MudContainer>

<script>
    let lastFocused = 'username';

    document.addEventListener('click', (event) => {
        const usernameInput = document.querySelector('.username-field input');
        const passwordInput = document.querySelector('.password-field input');
        const form = document.querySelector('form');

        if (!usernameInput || !passwordInput || !form) return;

        const clickedInsideForm = form.contains(event.target);

        if (!clickedInsideForm) {
            if (lastFocused !== 'password') {
                usernameInput.focus();
                lastFocused = 'username';
            }
            return;
        }

        if (passwordInput === document.activeElement) {
            lastFocused = 'password';
        } else if (usernameInput === document.activeElement) {
            lastFocused = 'username';
        }
    });

    window.setInitialFocus = () => {
        const usernameInput = document.querySelector('.username-field input');
        if (usernameInput) {
            usernameInput.focus();
            lastFocused = 'username';
        }
    };
</script>

@code {
    private bool _isSubmitting;
    private bool _isLoged;
    private MudTextField<string> usernameField;
    private string ApiBaseUrl => Configuration["ApiBaseUrl"];
    private AuthenticationData loginModel = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("setInitialFocus");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await AuthService.LoadTokenAsync();

        if (!string.IsNullOrWhiteSpace(AuthService.Token))
        {
            Navigation.NavigateTo("/home", true);
        }
    }

    private async Task HandleLogin()
    {
        _isSubmitting = true;
        _isLoged = false;
        StateHasChanged();

        try
        {
            var response = await Http.PostAsJsonAsync($"{ApiBaseUrl}/api/Auth/Verify", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();

                if (!string.IsNullOrWhiteSpace(token))
                {
                    await AuthService.SetTokenAsync(token);

                    if (AuthService.IsAdmin)
                        Navigation.NavigateTo("/home", true);
                    else if (AuthService.IsAdder)
                        Navigation.NavigateTo("/adding-product", true);
                    else if (AuthService.IsCashier)
                        Navigation.NavigateTo("/pockets", true);
                    else
                        return;
                }
            }

            _isLoged = true;
        }
        catch
        {
            _isLoged = true;
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrWhiteSpace(loginModel.UserName) && !loginModel.UserName.Contains("|"))
            {
                try
                {
                    var decodedBytes = Convert.FromBase64String(loginModel.UserName);
                    var decodedString = System.Text.Encoding.UTF8.GetString(decodedBytes);

                    if (decodedString.Contains("|"))
                    {
                        var parts = decodedString.Split("|");
                        if (parts.Length == 2)
                        {
                            loginModel.UserName = parts[0];
                            loginModel.PasswordHash = parts[1];
                            await HandleLogin();
                            return;
                        }
                    }
                }
                catch
                {
                    // ignored
                }
            }
        }
    }

    private async Task ShowDialog(string message)
    {
        var parameters = new DialogParameters
        {
            { "Message", message }
        };

        await DialogService.ShowAsync<DynamicDialog>("Ошибка", parameters);
    }

}
