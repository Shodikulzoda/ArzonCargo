@page "/pockets"
@using System.Net.Http.Headers
@using System.Text.Json
@using MudBlazor.Components.DialogWindows.OrderDialogs
@using MudBlazor.Components.DialogWindows.PocketDialogs
@using MudBlazor.Components.Service
@using Stocky.Shared.Models
@inject HttpClient Http
@inject IDialogService DialogService
@inject AuthService AuthService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<PageTitle>Добавление Пакетов</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Таблица Пакетов</MudText>

<div class="mb-4 d-flex gap-2">
    <MudTextField @bind-Value="_searchQuery"
                  Placeholder="Поиск по штрихкоду, пользователю и т.д..."
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Immediate="true"
                  OnKeyDown="HandleKeyDown"
                  Margin="Margin.Dense"/>

    <MudButton OnClick="SearchPocket" Color="Color.Primary" Variant="Variant.Filled">
        Поиск
    </MudButton>

    <MudButton OnClick="OpenCreatePocketDialog" Color="Color.Success" Variant="Variant.Filled">
        Создать Пакет
    </MudButton>
</div>

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudTable Items="_pocketPage?.Items" Hover="true" SortLabel="Сортировать по" Elevation="1" Dense="true">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Pocket, object>(x => x.Id)">Id</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Pocket, object>(x => x.BarCode)">Штрихкод</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Pocket, object>(x => x.TotalAmount)">Общая сумма
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Pocket, object>(x => x.TotalWeight)">Общий вес
                </MudTableSortLabel>
            </MudTh>
            <MudTh>Id пользователя</MudTh>
            <MudTh>Завершить заказ</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="BarCode">@context.BarCode</MudTd>
            <MudTd DataLabel="TotalAmount">@context.TotalAmount</MudTd>
            <MudTd DataLabel="TotalWeight">@context.TotalWeight</MudTd>
            <MudTd DataLabel="UserId">@context.UserId</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Add"
                               Color="Color.Primary"
                               OnClick="@(() => CreateOrder(context.UserId, context.TotalAmount))"/>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <div class="mt-4 d-flex justify-between">
        <MudButton OnClick="Decrement" Disabled="@(_currentPage <= 1)" Color="Color.Secondary">Назад</MudButton>
        <MudText Class="mx-2">@_currentPage / @_totalPages</MudText>
        <MudButton OnClick="Increment" Disabled="@(_currentPage >= _totalPages)" Color="Color.Primary">Вперёд</MudButton>
    </div>
}

@code {
    private PageData<Pocket>? _pocketPage = new();
    private int _currentPage = 1;
    private int _totalPages = 1;
    private readonly int _pageSize = 15;
    private bool _isLoading;
    private string _searchQuery = "";
    private string? ApiBaseUrl => Configuration["ApiBaseUrl"];

    protected override async Task OnInitializedAsync()
    {
        await AuthService.LoadTokenAsync();

        if (string.IsNullOrEmpty(AuthService.Token))
        {
            // Нет токена — редирект
            NavigationManager.NavigateTo("/Unauthorized", true);
            return;
        }

        var role = await AuthService.GetUserRoleAsync();

        if (role != "Admin")
        {
            // Если роль не админ — редирект
            NavigationManager.NavigateTo("/Unauthorized", true);
            return;
        }

        await LoadPockets();
    }


    private async Task LoadPockets()
    {
        _isLoading = true;
        try
        {
            var url = $"{ApiBaseUrl}/Pocket/PocketPagination?Page={_currentPage}&PageSize={_pageSize}";
            var request = new HttpRequestMessage(HttpMethod.Get, url);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", AuthService.Token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                _pocketPage = JsonSerializer.Deserialize<PageData<Pocket>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                _pocketPage ??= new PageData<Pocket> { Items = new List<Pocket>(), TotalCount = 0 };
                _totalPages = (int)Math.Ceiling((double)(_pocketPage.TotalCount) / _pageSize);
            }
            else
            {
                _pocketPage = new PageData<Pocket> { Items = new List<Pocket>(), TotalCount = 0 };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading pockets: " + ex.Message);
            _pocketPage = new PageData<Pocket> { Items = new List<Pocket>(), TotalCount = 0 };
        }

        _isLoading = false;
    }

    private async Task SearchPocket()
    {
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            await LoadPockets();
            return;
        }

        _isLoading = true;
        try
        {
            var url = $"{ApiBaseUrl}/Pocket/GetPocketBySearch?Text={Uri.EscapeDataString(_searchQuery)}";
            var results = await Http.GetFromJsonAsync<IEnumerable<Pocket>>(url);
            _pocketPage.Items = results?.ToList() ?? [];

            _totalPages = 1;
            _currentPage = 1;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Search error: " + ex.Message);
            _pocketPage.Items = [];
        }

        _isLoading = false;
    }

    private async Task CreateOrder(int userId, double totalAmount)
    {
        var parameters = new DialogParameters
        {
            { "UserId", userId },
            { "TotalAmount", totalAmount }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialogReference = await DialogService.ShowAsync<CreateOrderDialog>("Создать заказ", parameters, options);

        var result = await dialogReference.Result;
        if (result is { Canceled: false })
        {
            await LoadPockets();
        }
    }

    private async Task OpenCreatePocketDialog()
    {
        var options = new DialogOptions
        {
            NoHeader = false,
            CloseOnEscapeKey = false,         
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.Medium,
            BackdropClick = false,
            FullWidth = true,
            CloseButton = false,
        };

        var dialogReference = await DialogService.ShowAsync<CreatePocketDialog>(
            "Создать пакет",
            new DialogParameters(),
            options);

        var result = await dialogReference.Result;

        if (result is { Canceled: false })
        {
            await LoadPockets();
        }
    }


    private async Task Increment()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadPockets();
        }
    }

    private async Task Decrement()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadPockets();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SearchPocket();
        }
    }

}