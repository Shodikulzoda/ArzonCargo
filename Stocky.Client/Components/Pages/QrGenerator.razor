@page "/QrGenerator"
@using System.Text
@using Append.Blazor.Printing
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor.Components.Service
@using QRCoder
@using Color = MudBlazor.Color
@inject IPrintingService PrintingService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AuthService AuthService


<MudPaper Class="pa-4 mx-auto" Style="max-width:400px;">
    <MudText Typo="Typo.h5">Generate Login QR Code</MudText>

    <MudTextField @bind-Value="Login" Label="Login" Variant="Variant.Outlined" Class="mt-4"/>
    <MudTextField @bind-Value="Password" Label="Password" Variant="Variant.Outlined" InputType="InputType.Password"/>

    <MudButton OnClick="GenerateQRCode" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
        Generate QR
    </MudButton>

    @if (!string.IsNullOrEmpty(QRCodeBase64))
    {
        <MudPaper Class="mt-4 pa-4">
            <MudText Typo="Typo.subtitle1">QR Code:</MudText>
            <div id="qr-print">
                <img src="@QRCodeBase64" alt="QR Code" style="max-width:100%;"/>
            </div>
        </MudPaper>
    }
</MudPaper>

@code {
    private string? Login { get; set; }
    private string? Password { get; set; }
    private string? QRCodeBase64 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Load token or any other setup you do in AuthService
        await AuthService.LoadTokenAsync();

        if (string.IsNullOrEmpty(AuthService.Token))
        {
            NavigationManager.NavigateTo("/Unauthorized", true);
            return;
        }

        var role = await AuthService.GetUserRoleAsync();

        if (role != "Admin")
        {
            NavigationManager.NavigateTo("/Unauthorized", true);
        }
    }


    private async Task GenerateQRCode()
    {
        if (!string.IsNullOrWhiteSpace(Login) && !string.IsNullOrWhiteSpace(Password))
        {
            var combined = $"{Login}|{Password}";
            var base64Data = Convert.ToBase64String(Encoding.UTF8.GetBytes(combined));

            using var qrGenerator = new QRCodeGenerator();
            using var qrCodeData = qrGenerator.CreateQrCode(base64Data, QRCodeGenerator.ECCLevel.Q);
            using var qrCode = new PngByteQRCode(qrCodeData);
            var qrCodeBytes = qrCode.GetGraphic(20);

            var qr = Convert.ToBase64String(qrCodeBytes);
            var rawHtml = $"""<img src="data:image/png;base64,{qr}" style="width:55mm;height:55mm;"/>""";

            await Task.Delay(00);
            await PrintingService.Print(rawHtml, PrintType.RawHtml);
        }
    }

}