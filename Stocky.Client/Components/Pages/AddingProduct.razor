@page "/adding-product"
@using Stocky.Shared.Models
@inject HttpClient Http
@inject IJSRuntime Js

<PageTitle>Barcode Scanner</PageTitle>

<MudPaper Class="p-4 mx-auto mt-6" Style="max-width: 600px;">
    <MudText Typo="Typo.h5" GutterBottom>Barcode Scanner</MudText>

    <MudTextField Label="Enter Barcode"
                  @bind-Value="_barcode"
                  Variant="Variant.Filled"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.QrCode"
                  Immediate="true"
                  Class="barcode-text"
                  OnKeyDown="HandleKeyPress"/>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitBarcode" Class="mt-2 me-2">
        Add
    </MudButton>

    <MudText Color="Color.Success" Class="mt-2">@_message</MudText>
    <MudText Color="Color.Error" Class="mt-2">@_errorMessage</MudText>

</MudPaper>

@if (_products.Any())
{
    <MudPaper Class="p-4 mx-auto mt-4" Style="max-width: 600px;">
        <MudText Typo="Typo.h6">Added Products</MudText>

        <MudTable Items="_products" Elevation="2" Dense="true" Hover="true">
            <HeaderContent>
                <MudTh>Barcode</MudTh>
                <MudTh></MudTh> <!-- For Delete button -->
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Barcode">@context.BarCode</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Text" Color="Color.Error" Size="Size.Small"
                               OnClick="@(() => RemoveProduct(context.BarCode))">
                        Delete
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}

<script>
    window.focusElement = () => {
        const el = document.querySelector('.barcode-text input');
        if (el) {
            el.value = '';
            el.focus();
        }
    };
</script>

@code {
    private string _barcode = string.Empty;
    private string _message = string.Empty;
    private string _errorMessage = string.Empty;
    private readonly List<Product> _products = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await Js.InvokeVoidAsync("focusElement");
    }

    private async Task SubmitBarcode()
    {
        if (string.IsNullOrWhiteSpace(_barcode))
        {
            _message = string.Empty;
            _errorMessage = "Enter the barcode!";
            await Js.InvokeVoidAsync("focusElement");
            return;
        }

        var response = await Http.PostAsync(
            $"http://localhost:5191/Product/Add?BarCode={Uri.EscapeDataString(_barcode)}",
            null
        );

        if (response.IsSuccessStatusCode)
        {
            // Only add barcode if not already added
            if (_products.Any(p => p.BarCode == _barcode))
                _products.Add(new Product { BarCode = _barcode });

            _message = "Barcode added successfully!";
            _errorMessage = string.Empty;
        }
        else
        {
            _errorMessage = $"The product with barCode: {_barcode} is already exist!";
        }

        _barcode = "";
        await Js.InvokeVoidAsync("focusElement");
    }

    private void RemoveProduct(string? barcode)
    {
        var product = _products.FirstOrDefault(p => p.BarCode == barcode);
        if (product != null)
        {
            _products.Remove(product);
            _errorMessage = $"Removed barcode '{barcode}' from the list.";
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key is "Enter" or "NumpadEnter")
        {
            await SubmitBarcode();
        }
    }

}