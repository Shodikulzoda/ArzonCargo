@page "/counter"
@using ReferenceClass.Models
@inject HttpClient Http


<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>Address</th>
        <th>Phone</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var value in Users)
    {
        <tr>
            <td>@value.Id</td>
            <td>@value.Name</td>
            <td>@value.Address</td>
            <td>@value.Phone</td>
        </tr>
    }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="Decrement">back</button>
<p role="status">@CurrentPage - @TotalPages</p>
<button class="btn btn-primary" @onclick="Increment">next</button>


@code {
    public IEnumerable<User> Users { get; set; } = [];
    public UserDto? UserDto = new();

    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize = 10;
    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await ShowPage();
    }

    private async Task Increment()
    {
        if (!IsLoading && CurrentPage < TotalPages)
        {
            CurrentPage++;
            await ShowPage();
        }
    }

    private async Task Decrement()
    {
        if (!IsLoading && CurrentPage > 1)
        {
            CurrentPage--;
            await ShowPage();
        }
    }

    public async Task ShowPage()
    {
        IsLoading = true;

        try
        {
            string url = $"http://localhost:5191/User/UserPagination?Page={CurrentPage}&PageSize={PageSize}";

            UserDto = await Http.GetFromJsonAsync<UserDto>(url);

            if (UserDto?.Users != null)
            {
                Users = UserDto.Users.ToList();

                int totalCount = UserDto.TotalCount;
                TotalPages = totalCount > 0
                    ? (int)Math.Ceiling((double)totalCount / PageSize)
                    : 1;

                if (CurrentPage > TotalPages)
                {
                    CurrentPage = TotalPages;
                }
            }
            else
            {
                Users = [];
                TotalPages = 1;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Users = [];
            TotalPages = 1;
        }
        finally
        {
            IsLoading = false;
        }
    }

}