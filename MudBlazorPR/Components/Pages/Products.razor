@page "/products"
@inject HttpClient Http
@inject IDialogService DialogService
@using MudBlazor.Components.DialogWindows
@using ReferenceClass.Models

<PageTitle>Products</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Products Table</MudText>

<div class="mb-4 d-flex gap-2">
    <MudTextField @bind-Value="SearchQuery"
                  Placeholder="Search by name, phone, etc..."
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Immediate="true"
                  OnKeyDown="HandleKeyDown"
                  Margin="Margin.Dense"/>
    <MudButton OnClick="SearchProduct" Color="Color.Primary" Variant="Variant.Filled">Search</MudButton>
</div>

@if (IsLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true"/>
}
else
{
    <MudTable Items="ProductList" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Id)">Id</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Product, object>(x => x.BarCode)">BarCode</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Product, object>(x => x.Status)">Status</MudTableSortLabel>
            </MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.BarCode</MudTd>
            <MudTd DataLabel="Address">@context.Status</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Primary"
                               OnClick="@(() => OpenEditDialog(context))"/>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => ConfirmDelete(context.Id))"/>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <div class="mt-4 d-flex justify-between">
        <MudButton OnClick="Decrement" Disabled="@(CurrentPage <= 1)" Color="Color.Secondary">Back</MudButton>
        <MudText Class="mx-2">@CurrentPage / @TotalPages</MudText>
        <MudButton OnClick="Increment" Disabled="@(CurrentPage >= TotalPages)" Color="Color.Primary">Next</MudButton>
    </div>
}

@code {
    private IEnumerable<Product> ProductList { get; set; } = Enumerable.Empty<Product>();
    private ProductDto? ProductDtos { get; set; }

    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize = 10;
    private bool IsLoading = false;
    private string SearchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadProduct();
    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        try
        {
            string url = $"http://localhost:5191/Product/ProductPagination?Page={CurrentPage}&PageSize={PageSize}";
            ProductDtos = await Http.GetFromJsonAsync<ProductDto>(url);

            if (ProductDtos?.Products != null)
            {
                ProductList = ProductDtos.Products;
                TotalPages = (int)Math.Ceiling((double)ProductDtos.TotalCount / PageSize);
            }
            else
            {
                ProductList = Enumerable.Empty<Product>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading users: " + ex.Message);
            ProductList = Enumerable.Empty<Product>();
        }

        IsLoading = false;
    }

    private async Task ConfirmDelete(int productId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this user?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<ProductConfirmDeleteDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteProduct(productId);
        }
    }

    private async Task DeleteProduct(int productId)
    {
        IsLoading = true;
        try
        {
            string url = $"http://localhost:5191/Product/DeleteUser?Id={productId}";
            var response = await Http.DeleteAsync(url);

            if (response.IsSuccessStatusCode)
            {
                await LoadProduct();
            }
            else
            {
                Console.WriteLine("Error deleting user: " + response.ReasonPhrase);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error deleting user: " + ex.Message);
        }

        IsLoading = false;
    }

    private async Task OpenEditDialog(Product product)
    {
        var parameters = new DialogParameters
        {
            {
                "Product", new Product
                {
                    Id = product.Id,
                    Status = product.Status,
                }
            },
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<EditProductDialog>("Edit Product", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadProduct();
        }
    }

    private async Task SearchProduct()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            await LoadProduct();
            return;
        }

        IsLoading = true;
        try
        {
            string url = $"http://localhost:5191/Product/Search?Text={Uri.EscapeDataString(SearchQuery)}";
            ProductList = await Http.GetFromJsonAsync<IEnumerable<Product>>(url) ?? Enumerable.Empty<Product>();

            TotalPages = 1;
            CurrentPage = 1;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Search error: " + ex.Message);
            ProductList = Enumerable.Empty<Product>();
        }

        IsLoading = false;
        StateHasChanged();
    }

    private async Task Increment()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await LoadProduct();
        }
    }

    private async Task Decrement()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadProduct();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SearchProduct();
        }
    }

}