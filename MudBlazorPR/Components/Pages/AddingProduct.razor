@page "/adding-product"
@inject HttpClient Http
@inject IJSRuntime JS

@using MudBlazor
@using ReferenceClass.Models

<PageTitle>Barcode Scanner</PageTitle>

<MudPaper Class="p-4 mx-auto mt-6" Style="max-width: 600px;">
    <MudText Typo="Typo.h5" GutterBottom>Barcode Scanner</MudText>

    <MudTextField Label="Enter Barcode"
                  @bind-Value="Barcode"
                  Variant="Variant.Filled"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.QrCode"
                  Immediate="true"
                  Class="barcode-text"
                  OnKeyDown="HandleKeyPress"/>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitBarcode" Class="mt-2 me-2">
        Add
    </MudButton>

    <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="CheckBarcode" Class="mt-2">
        Check
    </MudButton>

    <MudText Color="Color.Success" Class="mt-2">@Message</MudText>
</MudPaper>

@if (Products.Any())
{
    <MudPaper Class="p-4 mx-auto mt-4" Style="max-width: 600px;">
        <MudText Typo="Typo.h6">Added Products</MudText>

        <MudTable Items="Products" Elevation="2" Dense="true" Hover="true">
            <HeaderContent>
                <MudTh>Barcode</MudTh>
                <MudTh></MudTh> <!-- For Delete button -->
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Barcode">@context.BarCode</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Text" Color="Color.Error" Size="Size.Small"
                               OnClick="@(() => RemoveProduct(context.BarCode))">
                        Delete
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}

<script>
    window.focusElement = () => {
        const el = document.querySelector('.barcode-text input');
        if (el) {
            el.value = '';
            el.focus();
        }
    };
</script>

@code {
    private string Barcode = "";
    private string Message = "";
    private List<Product> Products = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("focusElement");
    }

    private async Task SubmitBarcode()
    {
        if (string.IsNullOrWhiteSpace(Barcode))
        {
            Message = "Please enter a barcode.";
            await JS.InvokeVoidAsync("focusElement");
            return;
        }

        var response = await Http.PostAsync(
            $"http://localhost:5191/Product/Add?BarCode={Uri.EscapeDataString(Barcode)}",
            null
        );

        if (response.IsSuccessStatusCode)
        {
            // Only add barcode if not already added
            if (!Products.Any(p => p.BarCode == Barcode))
                Products.Add(new Product { BarCode = Barcode });

            Message = "Barcode added successfully!";
        }
        else
        {
            Message = "Failed to add barcode.";
        }

        Barcode = "";
        await JS.InvokeVoidAsync("focusElement");
    }

    private async Task CheckBarcode()
    {
        if (string.IsNullOrWhiteSpace(Barcode))
        {
            Message = "Please enter a barcode to check.";
            await JS.InvokeVoidAsync("focusElement");
            return;
        }

        try
        {
            var response = await Http.GetAsync(
                $"http://localhost:5191/Product/GetByBarCode?BarCode={Uri.EscapeDataString(Barcode)}"
            );

            if (response.IsSuccessStatusCode)
            {
                Message = $"Product with barcode '{Barcode}' is registered.";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Message = $"Product with barcode '{Barcode}' is NOT registered.";
            }
            else
            {
                Message = "Error checking barcode.";
            }
        }
        catch
        {
            Message = "Failed to check barcode due to network or server error.";
        }

        await JS.InvokeVoidAsync("focusElement");
    }

    private async Task RemoveProduct(string barcode)
    {
        var product = Products.FirstOrDefault(p => p.BarCode == barcode);
        if (product != null)
        {
            var response = await Http.GetAsync(
                $"http://localhost:5191/Product/DeleteUser?Id=5");

            Products.Remove(product);
            Message = $"Removed barcode '{barcode}' from the list.";
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SubmitBarcode();
        }
    }

}
