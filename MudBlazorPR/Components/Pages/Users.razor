@page "/users"
@inject HttpClient Http
@inject IDialogService DialogService
@using MudBlazor.Components.DialogWindows
@using ReferenceClass.Models

<PageTitle>Users</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Users Table</MudText>

<div class="mb-4 d-flex gap-2">
    <MudTextField @bind-Value="SearchQuery"
                  Placeholder="Search by name, phone, etc..."
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Immediate="true"
                  OnKeyDown="HandleKeyDown"
                  Margin="Margin.Dense" />
    <MudButton OnClick="SearchUsers" Color="Color.Primary" Variant="Variant.Filled">Search</MudButton>
    <MudButton OnClick="OpenCreateDialog" Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">
        Add User
    </MudButton>
</div>

@if (IsLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="UsersList" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Address)">Address</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Phone)">Phone</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd DataLabel="Phone">@context.Phone</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                               Color="Color.Primary"
                               OnClick="@(() => OpenEditDialog(context))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => ConfirmDelete(context.Id))" />
            </MudTd>
        </RowTemplate>
    </MudTable>

    <div class="mt-4 d-flex justify-between">
        <MudButton OnClick="Decrement" Disabled="@(CurrentPage <= 1)" Color="Color.Secondary">Back</MudButton>
        <MudText Class="mx-2">@CurrentPage / @TotalPages</MudText>
        <MudButton OnClick="Increment" Disabled="@(CurrentPage >= TotalPages)" Color="Color.Primary">Next</MudButton>
    </div>
}

@code {
    private IEnumerable<User> UsersList { get; set; } = Enumerable.Empty<User>();
    private UserDto? UserDtos { get; set; }

    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize = 10;
    private bool IsLoading = false;
    private string SearchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        IsLoading = true;
        try
        {
            string url = $"http://localhost:5191/User/UserPagination?Page={CurrentPage}&PageSize={PageSize}";
            UserDtos = await Http.GetFromJsonAsync<UserDto>(url);

            if (UserDtos?.Users != null)
            {
                UsersList = UserDtos.Users;
                TotalPages = (int)Math.Ceiling((double)UserDtos.TotalCount / PageSize);
            }
            else
            {
                UsersList = Enumerable.Empty<User>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading users: " + ex.Message);
            UsersList = Enumerable.Empty<User>();
        }
        IsLoading = false;
    }

    private async Task ConfirmDelete(int userId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this user?" },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteUser(userId);
        }
    }

    private async Task DeleteUser(int userId)
    {
        IsLoading = true;
        try
        {
            string url = $"http://localhost:5191/User/DeleteUser?Id={userId}";
            var response = await Http.DeleteAsync(url);

            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
            else
            {
                Console.WriteLine("Error deleting user: " + response.ReasonPhrase);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error deleting user: " + ex.Message);
        }
        IsLoading = false;
    }

    private async Task OpenEditDialog(User user)
    {
        var parameters = new DialogParameters
        {
            { "UserModel", new User {
                Id = user.Id,
                Name = user.Name,
                Phone = user.Phone,
                Address = user.Address,
                Role = user.Role
            }},
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<EditUserDialog>("Edit User", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadUsers();
        }
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters
        {
            { "UserModel", new User() }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<CreateUserDialog>("Create User", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadUsers();
        }
    }

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            await LoadUsers();
            return;
        }

        IsLoading = true;
        try
        {
            string url = $"http://localhost:5191/User/Search?Text={Uri.EscapeDataString(SearchQuery)}";
            UsersList = await Http.GetFromJsonAsync<IEnumerable<User>>(url) ?? Enumerable.Empty<User>();

            TotalPages = 1;
            CurrentPage = 1;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Search error: " + ex.Message);
            UsersList = Enumerable.Empty<User>();
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task Increment()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await LoadUsers();
        }
    }

    private async Task Decrement()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadUsers();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SearchUsers();
        }
    }

    public class UserDto
    {
        public IEnumerable<User> Users { get; set; } = Enumerable.Empty<User>();
        public int TotalCount { get; set; }
    }
}
