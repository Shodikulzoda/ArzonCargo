@page "/weather"
@using System.Net.Http.Json
@inject HttpClient Http
@using MudBlazor
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Users</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Users Table</MudText>
<MudText Typo="Typo.body1" Class="mb-4">Fetched from real API with sorting, pagination, and search.</MudText>

<MudTextField @bind-Value="SearchQuery"
              Placeholder="Search by name, phone, etc..."
              Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search"
              Immediate="true"
              OnKeyDown="HandleKeyDown"
              Class="mb-4"
              Margin="Margin.Dense"
/>

<MudButton OnClick="SearchUsers" Color="Color.Primary" Variant="Variant.Filled" Class="mb-4">Search</MudButton>

@if (IsLoading)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="Users" Hover="true" SortLabel="Sort By" Elevation="1" Dense="true">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Address)">Address</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<User, object>(x => x.Phone)">Phone</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd DataLabel="Phone">@context.Phone</MudTd>
        </RowTemplate>
    </MudTable>

    <div class="mt-4 d-flex justify-between">
        <MudButton OnClick="Decrement" Disabled="@(CurrentPage <= 1)" Color="Color.Secondary">Back</MudButton>
        <MudText Class="mx-2">@CurrentPage / @TotalPages</MudText>
        <MudButton OnClick="Increment" Disabled="@(CurrentPage >= TotalPages)" Color="Color.Primary">Next</MudButton>
    </div>
}

@code {
    private List<User> Users { get; set; } = new();
    private UserDto? UserDtos { get; set; }

    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize = 10;
    private bool IsLoading = false;

    private string SearchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        IsLoading = true;
        try
        {
            string url = $"http://localhost:5191/User/UserPagination?Page={CurrentPage}&PageSize={PageSize}";
            UserDtos = await Http.GetFromJsonAsync<UserDto>(url);

            if (UserDtos?.Users != null)
            {
                Users = UserDtos.Users;
                TotalPages = (int)Math.Ceiling((double)UserDtos.TotalCount / PageSize);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading users: " + ex.Message);
            Users = new();
        }
        IsLoading = false;
    }

    private async Task SearchUsers()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            await LoadUsers();
            return;
        }

        IsLoading = true;
        try
        {
            string url = $"http://localhost:5191/User/Search?Text={Uri.EscapeDataString(SearchQuery)}";
            Users = await Http.GetFromJsonAsync<List<User>>(url) ?? [];

            if (UserDtos?.Users != null)
            {
                TotalPages = 1;
                CurrentPage = 1;
            }
            else
            {
                Users = new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Search error: " + ex.Message);
            Users = new();
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task Increment()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            await LoadUsers();
        }
    }

    private async Task Decrement()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            await LoadUsers();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SearchUsers();
        }
    }

    public class User
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Phone { get; set; }
        public string? Address { get; set; }
    }

    public class UserDto
    {
        public List<User> Users { get; set; } = new();
        public int TotalCount { get; set; }
    }
}
